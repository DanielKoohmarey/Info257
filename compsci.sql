-- phpMyAdmin SQL Dump
-- version 3.4.10.1deb1
-- http://www.phpmyadmin.net
--
-- Host: localhost
-- Generation Time: Oct 30, 2014 at 03:48 PM
-- Server version: 5.5.35
-- PHP Version: 5.3.10-1ubuntu3

SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- Database: `compsci`
--

-- --------------------------------------------------------

--
-- Table structure for table `Assistants`
--

CREATE TABLE IF NOT EXISTS `Assistants` (
  `Person_Name` varchar(64) NOT NULL,
  `CCN` int(11) NOT NULL DEFAULT '0',
  `Officer` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`CCN`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `Assistants`
--

INSERT INTO `Assistants` (`Person_Name`, `CCN`, `Officer`) VALUES
('Shoumik Palkar', 24704, 0),
('Akshay Narayan', 24707, 0),
('Chang Lan', 24710, 0),
('Qifan Pu', 24713, 0),
('Radhika Mittal', 24716, 0),
('Sangjin Han', 24719, 0),
('James Mccauley', 24722, 0),
('Xiang Gao', 24725, 0),
('Anurag Khandelwal', 24728, 0),
('Vaishaal Shankar', 25660, 0),
('Kaifei Chen', 25663, 0),
('Joseph Cawthorne', 25666, 0),
('Steven Traversi', 25667, 0),
('Joseph Cawthorne', 25669, 0),
('Sumer Mohammed', 25677, 0),
('Shreyas Chand', 25678, 0),
('Rohan Chitnis', 25679, 0),
('Sumer Mohammed', 25680, 0),
('Shreyas Chand', 25681, 0),
('Chuqiao Dong', 25682, 0),
('Rachel Huang', 25683, 0),
('William Huang', 25685, 0),
('Rachel Huang', 25686, 0),
('William Huang', 25688, 0),
('Janna Erin Golden', 25689, 0),
('Janna Erin Golden', 25692, 0),
('Victoria Shi', 25695, 0),
('Lei John Du', 25696, 0),
('Amy Tsai', 25697, 0),
('Victoria Shi', 25698, 0),
('Youri Park', 25699, 0),
('Haley Rowland', 25700, 0),
('Jaclyn Field Burge', 25701, 0),
('Soumya Basu', 25702, 0),
('Lewin Gan', 25703, 1),
('Jaclyn Field Burge', 25704, 0),
('Chloe Lischinsky', 25705, 0),
('Brian Ming Liang Hou', 25706, 1),
('Maximilian Ezra Peter Dougherty', 25707, 0),
('Youri Park', 25708, 0),
('Chenyang Yuan', 25709, 0),
('Maximilian Ezra Peter Dougherty', 25710, 0),
('Robert Huang', 25711, 0),
('Brian Ming Liang Hou', 25712, 1),
('Jeffrey Snowiss', 25713, 0),
('Chenyang Yuan', 25714, 0),
('Chloe Lischinsky', 25715, 0),
('Jeffrey Snowiss', 25716, 0),
('Albert Wu', 25717, 0),
('Youri Park', 25718, 0),
('Adam Stanley Kuphaldt', 25719, 0),
('Albert Wu', 25720, 0),
('Soumya Basu', 25721, 0),
('Adam Stanley Kuphaldt', 25722, 0),
('Chloe Lischinsky', 25723, 0),
('Youri Park', 25724, 0),
('Arany Uthayakumar', 25725, 0),
('Robert Huang', 25726, 0),
('James Sha', 25727, 0),
('Arany Uthayakumar', 25728, 0),
('Dickson H Tsai', 25729, 0),
('Don Mai', 25730, 0),
('Andrew Michael Schmitt', 25731, 0),
('Allen Lamson Nguyen', 25732, 0),
('Dickson H Tsai', 25733, 0),
('Andrew Michael Schmitt', 25734, 0),
('Marvin Zhang', 25735, 0),
('Steven Traversi', 25736, 0),
('Allen Lamson Nguyen', 25738, 0),
('Marvin Zhang', 25741, 0),
('Michael Tao', 25755, 0),
('Patrick George Lutz', 25757, 0),
('Michael Tao', 25758, 0),
('Sarah Jiyun Kim', 25760, 0),
('Matthew King Man Chow', 25761, 0),
('Jerry Cheng', 25762, 0),
('Matthew King Man Chow', 25764, 0),
('Mehdi Jamei', 25767, 0),
('Mehdi Jamei', 25770, 0),
('Elizabeth Ann Marrone', 25773, 0),
('Elizabeth Ann Marrone', 25776, 0),
('Michelle Ruby Hwang', 25779, 0),
('Michelle Ruby Hwang', 25782, 0),
('Mehdi Jamei', 25785, 0),
('Mehdi Jamei', 25788, 0),
('Andrew Huang', 25791, 0),
('Andrew Huang', 25794, 0),
('Michelle Ruby Hwang', 25797, 0),
('Michelle Ruby Hwang', 25800, 0),
('Sumukh Sridhara', 25803, 0),
('Sumukh Sridhara', 25806, 0),
('Ajeya Cotra', 25809, 0),
('Ajeya Cotra', 25812, 0),
('Jian Qiao', 25815, 1),
('Jian Qiao', 25818, 1),
('Iris C Wang', 25821, 0),
('Iris C Wang', 25824, 0),
('Iris C Wang', 25827, 0),
('Iris C Wang', 25830, 0),
('Joy Ying Jeng', 25833, 0),
('Joy Ying Jeng', 25836, 0),
('Allen Lamson Nguyen', 25839, 0),
('Allen Lamson Nguyen', 25842, 0),
('Brian Ming Liang Hou', 25845, 1),
('Brian Ming Liang Hou', 25848, 1),
('Jian Qiao', 25851, 1),
('Jian Qiao', 25854, 1),
('Marvin Zhang', 25857, 0),
('Marvin Zhang', 25860, 0),
('Dickson H Tsai', 25863, 0),
('Dickson H Tsai', 25866, 0),
('Elizabeth Ann Marrone', 25869, 0),
('Elizabeth Ann Marrone', 25872, 0),
('Matthew King Man Chow', 25875, 0),
('Matthew King Man Chow', 25878, 0),
('Kaylee Mann', 25881, 0),
('Kaylee Mann', 25884, 0),
('Steven Tang', 25887, 0),
('Steven Tang', 25890, 0),
('Robert Huang', 25893, 0),
('Robert Huang', 25896, 0),
('Joy Ying Jeng', 25899, 0),
('Joy Ying Jeng', 25902, 0),
('Andrew Huang', 25905, 0),
('Andrew Huang', 25908, 0),
('Kaylee Mann', 25911, 0),
('Kaylee Mann', 25914, 0),
('Chloe Lischinsky', 25916, 0),
('Alicia Luengo-kovac', 25920, 0),
('Samuel Ethan Lau', 25923, 0),
('Aleksandr Yuriyevich Kamko', 25929, 0),
('Shu Zhong', 25932, 0),
('Jerry Cheng', 25935, 0),
('Jerry Cheng', 25938, 0),
('Patrick George Lutz', 25941, 0),
('Munim Mohammed Ali', 25944, 0),
('Leonino Bautista Colobong', 25947, 1),
('Leonino Bautista Colobong', 25950, 1),
('Sarah Jiyun Kim', 25953, 0),
('Sarah Jiyun Kim', 25956, 0),
('Melanie Diane Cebula', 25959, 0),
('Jene Y Li', 25962, 1),
('Shu Zhong', 25965, 0),
('Melanie Diane Cebula', 25968, 0),
('Jimmy Lee', 25971, 1),
('Quoc Tuan Truong', 25974, 0),
('Quoc Tuan Truong', 25977, 0),
('Quoc Tuan Truong', 25980, 0),
('Leonino Bautista Colobong', 25983, 1),
('Patrick George Lutz', 25986, 0),
('Jene Y Li', 25989, 1),
('Aleksandr Yuriyevich Kamko', 25992, 0),
('Munim Mohammed Ali', 25995, 0),
('Munim Mohammed Ali', 25998, 0),
('Shu Zhong', 26001, 0),
('Jimmy Lee', 26004, 1),
('Jimmy Lee', 26006, 1),
('Andrew Luo', 26010, 0),
('Andrew Luo', 26013, 0),
('Riyaz Danial Faizullabhoy', 26016, 1),
('Riyaz Danial Faizullabhoy', 26019, 1),
('Andrew Luo', 26022, 0),
('Andrew Luo', 26025, 0),
('David B. Adams', 26028, 0),
('David B. Adams', 26031, 0),
('Fred Hong', 26034, 0),
('Fred Hong', 26037, 0),
('Sagar Karandikar', 26040, 0),
('Sagar Karandikar', 26043, 0),
('Roger Yu Chen', 26046, 0),
('Roger Yu Chen', 26049, 0),
('Fred Hong', 26052, 0),
('Fred Hong', 26055, 0),
('Roger Yu Chen', 26058, 0),
('Roger Yu Chen', 26061, 0),
('William Huang', 26064, 0),
('William Huang', 26067, 0),
('Shreyas Chand', 26070, 0),
('Shreyas Chand', 26073, 0),
('Alexander Chou', 26076, 0),
('Alexander Chou', 26079, 0),
('Rohan Chitnis', 26082, 0),
('Rohan Chitnis', 26085, 0),
('David B. Adams', 26088, 0),
('David B. Adams', 26091, 0),
('Kevin Liston', 26094, 0),
('Kevin Liston', 26097, 0),
('Kevin Liston', 26100, 0),
('Kevin Liston', 26103, 0),
('Matthew Griffin', 26106, 0),
('Matthew Griffin', 26109, 0),
('Matthew Griffin', 26112, 0),
('Matthew Griffin', 26115, 0),
('Jay Patel', 26118, 0),
('Jay Patel', 26121, 0),
('Jay Patel', 26124, 0),
('Jay Patel', 26127, 0),
('Chuqiao Dong', 26128, 0),
('Rohan Chitnis', 26129, 0),
('Khoa Tran', 26133, 0),
('Vasuki Narasimha Swamy', 26136, 0),
('Chi Pang Lam', 26139, 0),
('Shuo-yiin Chang', 26142, 0),
('Erin Carson', 26145, 0),
('Ena Hariyoshi', 26148, 1),
('Edward Groshev', 26151, 0),
('Penporn Koanantakool', 26154, 0),
('Sean Jeng Liu', 26157, 0),
('Sean Jeng Liu', 26160, 0),
('Chen-hsi Steven Bi', 26163, 0),
('Edward Groshev', 26166, 0),
('Vasuki Narasimha Swamy', 26169, 0),
('Preetum Nakkiran', 26172, 0),
('Chi Pang Lam', 26175, 0),
('Zhijie Chen', 26178, 0),
('Ena Hariyoshi', 26187, 1),
('Ajay Shanker Tripathi', 26190, 0),
('Simon Scott', 26265, 0),
('Simon Scott', 26268, 0),
('Simon Scott', 26271, 0),
('Ian Lee Juch', 26274, 0),
('Ian Lee Juch', 26277, 0),
('Andrew Brian Fang', 26283, 1),
('Elizabeth Y Lin', 26286, 0),
('Elizabeth Y Lin', 26289, 0),
('Jose Mari Avenido Batilando', 26292, 0),
('Zhenqiang Gong', 26298, 0),
('Zhenqiang Gong', 26301, 0),
('Alec Guertin', 26304, 0),
('Arjun A Baokar', 26307, 0),
('Arjun A Baokar', 26310, 0),
('Alec Guertin', 26313, 0),
('Jason S Jia', 26319, 0),
('William Boyuan Liu', 26322, 0),
('Yuheng Tian', 26325, 0),
('Caleb Wang', 26328, 0),
('Arka Bhattacharya', 26331, 0),
('Stanley Ngai Nam Hung', 26334, 0),
('Arka Bhattacharya', 26336, 0),
('Sarah Chasins', 26340, 0),
('Sarah Chasins', 26343, 0),
('Ali Sinan Koksal', 26346, 0),
('Shaon Barman', 26348, 0),
('Kevin Andrew Casey', 26352, 0),
('Carina Boo', 26355, 0),
('Robin Kalia', 26358, 0),
('Nima Ahmadipouranari', 26367, 0),
('Nima Ahmadipouranari', 26370, 0),
('Yun Seong Park', 26373, 0),
('Evan Ye', 26376, 1),
('Rohit Sinha', 26379, 0),
('Ning Tan', 26382, 0),
('Ning Tan', 26385, 0),
('Daniel Juon Fremont', 26388, 0),
('Daniel Juon Fremont', 26391, 0),
('Evangelos Georganas', 26394, 0),
('Evangelos Georganas', 26397, 0),
('Baruch Sterin', 26400, 0),
('Baruch Sterin', 26403, 0),
('Yun Seong Park', 26405, 0),
('Aayush Dawra', 26415, 0),
('Aayush Dawra', 26418, 0),
('Kevin Wu', 26421, 0),
('Kevin Wu', 26424, 0),
('Patrick Virtue', 26457, 0),
('Patrick Virtue', 26460, 0),
('Joseph Moghadam', 26463, 1),
('Zeyu Liu', 26466, 1),
('Nimesh Madhavan Chakravarthi', 26469, 0),
('Kevin Tee', 26472, 0),
('Kevin Tee', 26475, 0),
('Shijing Yao', 26478, 0),
('Shijing Yao', 26481, 0),
('Anna Lee', 26484, 0),
('Don Mai', 26485, 0),
('Brielin Brown', 27051, 0),
('Faraz Tavakoli Farahani', 27054, 0),
('Daniel Freeman', 27096, 0);

-- --------------------------------------------------------

--
-- Table structure for table `Buildings`
--

CREATE TABLE IF NOT EXISTS `Buildings` (
  `Building_Name` varchar(12) NOT NULL,
  `History` varchar(1000) DEFAULT NULL,
  `Built` year(4) DEFAULT NULL,
  `Namesake` varchar(64) DEFAULT NULL,
  PRIMARY KEY (`Building_Name`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `Buildings`
--

INSERT INTO `Buildings` (`Building_Name`, `History`, `Built`, `Namesake`) VALUES
('Barker', 'Designed by William Wurster and named for Horace Albert Barker, a biochemist specializing in metabolism. ', 1964, 'Horace Albert Barker'),
('Barrows', 'Named for David Prescott Barrows, political science professor and president of the university from 1919-23.', 1964, 'David Prescott Barrows'),
('Cory', 'Named for Clarence L. Cory, dean of the College of Mechanics and a faculty member for almost 40 years, Cory had a fifth floor added in 1985, the exterior of which features a computer chip-inspired design motif. The building houses a state-of-the-art electronic micro-fabrication facility and labs devoted to integrated circuits, lasers, and robotics. Cory has the dubious distinction of being the only site bombed twice by "Unabomber" Theodore Kaczynski in the 1980s.', 1950, 'Clarence L. Cory'),
('Davis', 'Professor Raymond Davis spent 50 years on the Berkeley faculty and developed the Engineering Materials Laboratory into one of the world''s finest. Davis Hall houses the offices of the Department of Civil and Environmental Engineering, including its structural and earthquake engineering labs and teaching facilities.The building’s ground-floor “structures bay” rises two stories, providing space for testing many types of materials and designs, from scale models of California highway overpasses to segments of the Golden Gate Bridge.', 1968, 'Raymond Davis'),
('Dwinelle', 'With more than 300,000 square feet of office and classroom space, an infuriating room-numbering system, and a layout often likened to a maze, Dwinelle is the second largest building on campus. It is named for John W. Dwinelle, a UC regent, state assemblyman, and author of the 1868 "Organic Act" establishing the University of California. In the center is Ishi Court, named in honor of a Native American "found" by anthropologist Alfred Kroeber near Oroville, CA, in 1911 and brought to live in the UC Berkeley Museum of Anthropology.\n\nBecause of its site on a hill, Dwinelle has ground-level entrances on four different floors, and the same "floor" may be on two different levels a few feet apart, thanks to the building''s dual nature as classroom and office space with their differing height requirements.', 1952, 'John W. Dwinelle'),
('Etcheverry', 'The first UC-built building on the north side of Hearst Ave., it was named for Bernard Etcheverry, professor of drainage and irrigation and chairman of the department for nearly three decades. It once held a functioning nuclear reactor in its basement and a research wind tunnel, both now dismantled.', 1964, 'Bernard Etcheverry'),
('Evans', 'Original home of much of the computer infrastructure on campus, the building gets poor reviews because of its dark, closed-in design, its massive scale, and its unfortunate location spoiling the main east-west axis of the campus and what was intended to be a spectacular view out to the Golden Gate. Named for Griffith Evans, math department chair from 1934-49.', 1971, 'Griffith Evans'),
('Hildebrand', 'Named after Joel Hildebrand, longtime chemistry professor and dean, and the inventor of Chem-1A''s fabled Big Game Titration. The building houses graduate research laboratories, undergraduate teaching labs, and the chemistry library.', 1966, 'Joel Hildebrand'),
('HMMB', 'Designed by John Galen Howard and financed by Phoebe Apperson Hearst as a memorial to her husband George, "a plain honest man and good miner," silver tycoon, and U.S. senator. The building underwent a massive restoration, completed in 2002, that included cutting-edge seismic retrofitting to protect the building in the event of a major earthquake. In addition to its meticulously restored vaulted entrance gallery, elegant sculptured windows, and grand marble staircase, the building houses new laboratories for advanced experiments in computation, ceramics, metals, and polymers, as well as facilities to develop nanoscale and superconducting materials. Added to the National Register of Historic Places in 1982.', 1907, 'George Hearst'),
('Kroeber', 'Named for anthropology professor Alfred Kroeber, it houses the Phoebe Hearst Museum of Anthropology and the Worth Ryder Art Gallery, in addition to classroom and office space.', 1959, 'Alfred Kroeber'),
('Latimer', 'Named for Wendell Latimer, dean of the College of Chemistry in the 1940s, the building contains chemistry labs and classrooms. On the plaza southwest of Latimer Hall is a cupola, all that remains of the original chemistry building on campus.', 1963, 'Wendell Latimer'),
('Moffitt', 'This open-stack library for undergraduates is one of the busiest undergraduate libraries in the nation; it also houses the popular Free Speech Movement Café. Named for James K. Moffitt, an 1886 Berkeley graduate and UC Regent from 1911-48, it was designed by John Warnecke.', 1970, 'James K. Moffitt'),
('Soda', 'Funded by the Y & H Soda Foundation and named in honor of Y. Charles and Helen Soda as a tribute to their commitment to education in the Bay Area. With classrooms, labs, and offices, Soda Hall was designed with its Computer Science residents in mind: its open alcoves encourage informal interactions among students and faculty, and its labs and offices are grouped to foster a team approach to computing innovation. In Soda Hall, "the building is the computer," with advanced networking, wireless capabilities, and access to computer clusters for shared computing power, storage, and services - all unique when the building opened.', 1994, 'Y. Charles and Helen Soda'),
('Sutardja Dai', 'This 141,000-square-foot building is the headquarters of CITRIS, the multi-campus interdisciplinary research program that is one of four California Institutes for Science and Innovation. The building houses research labs, faculty offices, a nanofabrication lab, an auditorium, and a cyber café. CITRIS work aims to improve energy efficiency, transportation, environmental monitoring, seismic safety, education, cultural research and health care. The building honors a team of accomplished Berkeley engineering graduates: brothers Sehat and Pantas Sutardja and Weili Dai, the trio that founded Marvell Semiconductor, and Ting Chuk.', 2009, 'Sehat and Pantas Sutardja and Weili Dai'),
('VLSB', 'Named not for its location but for Wayne and Gladys Valley, who contributed toward the vast building''s major renovation in the early 1990s. The largest building in Berkeley (and the largest concrete building west of the Mississippi) when it was built in 1930, it remains the biggest building on campus, at over 400,000 square feet. Original exterior decorations from the George Kelham design include animal-shaped ornaments and the names of eight life science disciplines. Inside highlights include a giant T-Rex skeleton fronting the Museum of Paleontology.', 1930, 'Wayne and Gladys Valley'),
('Wheeler', 'Named for Benjamin Ide Wheeler, university president during Berkeley''s "golden years" from 1899-1919. The French Baroque facade includes arched doorways leading into a vaulted auditorium lobby, ionic columns across the middle floors, and a colonnade ornamented with urn-shaped lamps symbolizing, according to designer John Galen Howard, "the light of learning." It was added to the National Register of Historic Places in 1982.', 1917, 'Benjamin Ide Wheeler'),
('Wurster', 'Although home to Berkeley''s architecture department, Wurster is often voted Berkeley''s ugliest building for its Brutalist, bare concrete appearance. But some of the "ugliness" is a result of functionality, like the concrete sunshades over windows to minimize energy costs. It was named for William Wurster, dean of the School of Architecture and its successor, the College of Environmental Design (1950-62), and his wife, lecturer Catherine Bauer Wurster.', 1964, 'William and Catherine Bauer Wurster');

-- --------------------------------------------------------

--
-- Table structure for table `Courses`
--

CREATE TABLE IF NOT EXISTS `Courses` (
  `CCN` int(11) NOT NULL,
  `Course_Code` varchar(12) NOT NULL,
  `Course_Title` varchar(64) NOT NULL DEFAULT '',
  `Section_No` int(11) NOT NULL DEFAULT '0',
  `Description` varchar(512) DEFAULT NULL,
  `Time` varchar(32) DEFAULT NULL,
  `Room_No` varchar(8) DEFAULT NULL,
  `Building_Name` varchar(12) DEFAULT NULL,
  `Course_Type` char(3) DEFAULT NULL,
  `Units` int(11) DEFAULT NULL,
  `Exam` int(11) DEFAULT NULL,
  PRIMARY KEY (`CCN`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `Courses`
--

INSERT INTO `Courses` (`CCN`, `Course_Code`, `Course_Title`, `Section_No`, `Description`, `Time`, `Room_No`, `Building_Name`, `Course_Type`, `Units`, `Exam`) VALUES
(24701, 'CS 168', 'Introduction to the Internet: Architecture and Protocols', 1, 'This course is an introduction to the Internet architecture. We will focus on the concepts and fundamental design principles that have contributed to the Internet''s scalability and robustness and survey the various protocols and algorithms used within this architecture. Topics include layering, addressing, intradomain routing, interdomain routing, reliable delivery, congestion control, and the core protocols (e.g., TCP, UDP, IP, DNS, and HTTP) and network technologies (e.g., Ethernet, wireless).', 'MW 4:00-5:30P', '2050', 'VLSB', 'LEC', 4, 13),
(24704, 'CS 168', 'Introduction to the Internet: Architecture and Protocols', 101, 'This course is an introduction to the Internet architecture. We will focus on the concepts and fundamental design principles that have contributed to the Internet''s scalability and robustness and survey the various protocols and algorithms used within this architecture. Topics include layering, addressing, intradomain routing, interdomain routing, reliable delivery, congestion control, and the core protocols (e.g., TCP, UDP, IP, DNS, and HTTP) and network technologies (e.g., Ethernet, wireless).', 'M 12:00-1:00P', '247', 'Cory', 'DIS', 0, 0),
(24707, 'CS 168', 'Introduction to the Internet: Architecture and Protocols', 102, 'This course is an introduction to the Internet architecture. We will focus on the concepts and fundamental design principles that have contributed to the Internet''s scalability and robustness and survey the various protocols and algorithms used within this architecture. Topics include layering, addressing, intradomain routing, interdomain routing, reliable delivery, congestion control, and the core protocols (e.g., TCP, UDP, IP, DNS, and HTTP) and network technologies (e.g., Ethernet, wireless).', 'M 1:00-2:00P', '289', 'Cory', 'DIS', 0, 0),
(24710, 'CS 168', 'Introduction to the Internet: Architecture and Protocols', 103, 'This course is an introduction to the Internet architecture. We will focus on the concepts and fundamental design principles that have contributed to the Internet''s scalability and robustness and survey the various protocols and algorithms used within this architecture. Topics include layering, addressing, intradomain routing, interdomain routing, reliable delivery, congestion control, and the core protocols (e.g., TCP, UDP, IP, DNS, and HTTP) and network technologies (e.g., Ethernet, wireless).', 'M 2:00-3:00P', '285', 'Cory', 'DIS', 0, 0),
(24713, 'CS 168', 'Introduction to the Internet: Architecture and Protocols', 104, 'This course is an introduction to the Internet architecture. We will focus on the concepts and fundamental design principles that have contributed to the Internet''s scalability and robustness and survey the various protocols and algorithms used within this architecture. Topics include layering, addressing, intradomain routing, interdomain routing, reliable delivery, congestion control, and the core protocols (e.g., TCP, UDP, IP, DNS, and HTTP) and network technologies (e.g., Ethernet, wireless).', 'W 10:00-11:00A', '534', 'Davis', 'DIS', 0, 0),
(24716, 'CS 168', 'Introduction to the Internet: Architecture and Protocols', 105, 'This course is an introduction to the Internet architecture. We will focus on the concepts and fundamental design principles that have contributed to the Internet''s scalability and robustness and survey the various protocols and algorithms used within this architecture. Topics include layering, addressing, intradomain routing, interdomain routing, reliable delivery, congestion control, and the core protocols (e.g., TCP, UDP, IP, DNS, and HTTP) and network technologies (e.g., Ethernet, wireless).', 'W 11:00A-12:00P', '247', 'Cory', 'DIS', 0, 0),
(24719, 'CS 168', 'Introduction to the Internet: Architecture and Protocols', 106, 'This course is an introduction to the Internet architecture. We will focus on the concepts and fundamental design principles that have contributed to the Internet''s scalability and robustness and survey the various protocols and algorithms used within this architecture. Topics include layering, addressing, intradomain routing, interdomain routing, reliable delivery, congestion control, and the core protocols (e.g., TCP, UDP, IP, DNS, and HTTP) and network technologies (e.g., Ethernet, wireless).', 'W 12:00-1:00P', '310', 'HMMB', 'DIS', 0, 0),
(24722, 'CS 168', 'Introduction to the Internet: Architecture and Protocols', 107, 'This course is an introduction to the Internet architecture. We will focus on the concepts and fundamental design principles that have contributed to the Internet''s scalability and robustness and survey the various protocols and algorithms used within this architecture. Topics include layering, addressing, intradomain routing, interdomain routing, reliable delivery, congestion control, and the core protocols (e.g., TCP, UDP, IP, DNS, and HTTP) and network technologies (e.g., Ethernet, wireless).', 'W 1:00-2:00P', '285', 'Cory', 'DIS', 0, 0),
(24725, 'CS 168', 'Introduction to the Internet: Architecture and Protocols', 108, 'This course is an introduction to the Internet architecture. We will focus on the concepts and fundamental design principles that have contributed to the Internet''s scalability and robustness and survey the various protocols and algorithms used within this architecture. Topics include layering, addressing, intradomain routing, interdomain routing, reliable delivery, congestion control, and the core protocols (e.g., TCP, UDP, IP, DNS, and HTTP) and network technologies (e.g., Ethernet, wireless).', 'M 11:00-12:00P', '247', 'Cory', 'DIS', 0, 0),
(24728, 'CS 168', 'Introduction to the Internet: Architecture and Protocols', 109, 'This course is an introduction to the Internet architecture. We will focus on the concepts and fundamental design principles that have contributed to the Internet''s scalability and robustness and survey the various protocols and algorithms used within this architecture. Topics include layering, addressing, intradomain routing, interdomain routing, reliable delivery, congestion control, and the core protocols (e.g., TCP, UDP, IP, DNS, and HTTP) and network technologies (e.g., Ethernet, wireless).', 'M 9:00-10:00A', '241', 'Cory', 'DIS', 0, 0),
(25653, 'CS 9A', 'Fortran & Matlab for Programmers', 1, 'Introduction to the constructs in the Matlab programming language, aimed at students who already know how to program. Array and matrix operations, functions and function handles, control flow, plotting and image manipulation, cell arrays and structures, and the Symbolic Mathematics toolbox.', 'None', '200A', 'Sutardja Dai', 'SLF', 2, 0),
(25656, 'CS 9C', 'C for Programmers', 1, 'Self-paced course in the C programming language for students who already know how to program. Computation, input and output, flow of control, functions, arrays, and pointers, linked structures, use of dynamic storage, and implementation of abstract data types.', 'None', '200A', 'Sutardja Dai', 'SLF', 2, 0),
(25657, 'CS 294', 'Visual Object and Activity Recognition', 43, 'Topics will vary from semester to semester. See Computer Science Division announcements.', 'F 10:00A-12:00P', '730', 'Sutardja Dai', 'LEC', 1, 0),
(25659, 'CS 9D', 'Scheme for Programmers', 1, 'Self-paced course in functional programming, using the Scheme programming language, for students who already know how to program. Recursion; higher-order functions; list processing; implementation of rule-based querying.', 'None', '200A', 'Sutardja Dai', 'SLF', 2, 0),
(25660, 'CS 162', 'Operating Systems and System Programming', 108, 'Basic concepts of operating systems and system programming. Utility programs, subsystems, multiple-program systems. Processes, interprocess communication, and synchronization. Memory allocation, segmentation, paging. Loading and linking, libraries. Resource allocation, scheduling, performance evaluation. File systems, storage devices, I/O systems. Protection, security, and privacy.', 'W 4:00P-5:00P', '254', 'Sutardja Dai', 'DIS', 0, 0),
(25661, 'CS 98', 'Ripple for Developers', 45, 'Seminars for group study of selected topics, which will vary from year to year. Intended for students in the lower division.', 'TU 7:00-9:00P', '3', 'Evans', 'GRP', 2, 0),
(25662, 'CS 9E', 'Productive Unix Use', 1, 'Use of UNIX utilities and scripting facilities for customizing the programming environment, organizing files (possibly in more than one computer account), implementing a personal database, reformatting text, and searching for online resources.', 'None', '200A', 'Sutardja Dai', 'SLF', 2, 0),
(25663, 'CS 162', 'Operating Systems and System Programming', 109, 'Basic concepts of operating systems and system programming. Utility programs, subsystems, multiple-program systems. Processes, interprocess communication, and synchronization. Memory allocation, segmentation, paging. Loading and linking, libraries. Resource allocation, scheduling, performance evaluation. File systems, storage devices, I/O systems. Protection, security, and privacy.', 'Th 10:00-11:00A', '3109', 'Etcheverry', 'DIS', 0, 0),
(25664, 'CS 198', 'Ripple for Developers', 45, 'Group study of selected topics in Computer Sciences, usually relating to new developments.', 'TU 7:00-9:00P', '3', 'Evans', 'GRP', 2, 0),
(25665, 'CS 9F', 'C++ for Programmers', 1, 'Self-paced introduction to the constructs provided in the C++ programming language for procedural and object-oriented programming, aimed at students who already know how to program.', 'None', '200A', 'Sutardja Dai', 'SLF', 2, 0),
(25666, 'CS 10', 'The Beauty and Joy of Computing', 112, 'An introduction to the beauty and joy of computing. The history, social implications, great principles, and future of computing. Beautiful applications that have changed the world. How computing empowers discovery and progress in other fields. Relevance of computing to the student and society will be emphasized. Students will learn the joy of programming a computer using a friendly, graphical language, and will complete a substantial team programming project related to their interests.', 'M 11:00-1:00P; F 5:00-7:00P', '200', 'Sutardja Dai', 'LAB', 0, 0),
(25667, 'CS 10', 'The Beauty and Joy of Computing', 111, 'An introduction to the beauty and joy of computing. The history, social implications, great principles, and future of computing. Beautiful applications that have changed the world. How computing empowers discovery and progress in other fields. Relevance of computing to the student and society will be emphasized. Students will learn the joy of programming a computer using a friendly, graphical language, and will complete a substantial team programming project related to their interests.', 'F 2:00-3:00P', '320', 'Soda', 'DIS', 0, 0),
(25668, 'CS 9G', 'Java for Programmers', 1, 'Self-paced course in Java for students who already know how to program. Applets; variables and computation; events and flow of control; classes and objects; inheritance; GUI elements; applications; arrays, strings, files, and linked structures; exceptions; threads.', 'None', '200A', 'Sutardja Dai', 'SLF', 2, 0),
(25669, 'CS 10', 'The Beauty and Joy of Computing', 112, 'An introduction to the beauty and joy of computing. The history, social implications, great principles, and future of computing. Beautiful applications that have changed the world. How computing empowers discovery and progress in other fields. Relevance of computing to the student and society will be emphasized. Students will learn the joy of programming a computer using a friendly, graphical language, and will complete a substantial team programming project related to their interests.', 'F 3:00-4:00P', '320', 'Soda', 'DIS', 0, 0),
(25671, 'CS 9H', 'Python for Programmers', 1, 'Introduction to the constructs provided in the Python programming language, aimed at students who already know how to program. Flow of control; strings, tuples, lists, and dictionaries; CGI programming; file input and output; object-oriented programming; GUI elements.', 'None', '200A', 'Sutardja Dai', 'SLF', 2, 0),
(25672, 'CS 98', 'Snap! Below the Line', 46, 'Seminars for group study of selected topics, which will vary from year to year. Intended for students in the lower division.', 'TU 6:00-8:00P', '330', 'Soda', 'GRP', 2, 0),
(25674, 'CS 10', 'The Beauty and Joy of Computing', 1, 'An introduction to the beauty and joy of computing. The history, social implications, great principles, and future of computing. Beautiful applications that have changed the world. How computing empowers discovery and progress in other fields. Relevance of computing to the student and society will be emphasized. Students will learn the joy of programming a computer using a friendly, graphical language, and will complete a substantial team programming project related to their interests.', 'MW 3:00P-4:00P', '2050', 'VLSB', 'LEC', 4, 8),
(25675, 'CS 198', 'Snap! Below the Line', 46, 'Group study of selected topics in Computer Sciences, usually relating to new developments.', 'TU 6:00-8:00P', '330', 'Soda', 'GRP', 2, 0),
(25677, 'CS 10', 'The Beauty and Joy of Computing', 101, 'An introduction to the beauty and joy of computing. The history, social implications, great principles, and future of computing. Beautiful applications that have changed the world. How computing empowers discovery and progress in other fields. Relevance of computing to the student and society will be emphasized. Students will learn the joy of programming a computer using a friendly, graphical language, and will complete a substantial team programming project related to their interests.', 'WF 11:00A-1:00P', '200', 'Sutardja Dai', 'LAB', 0, 0),
(25678, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 34, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'F 1:00P-3:00P', '277', 'Soda', 'LAB', 0, 0),
(25679, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 133, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'W 11:00A-12:00P', '102', 'Latimer', 'DIS', 0, 0),
(25680, 'CS 10', 'The Beauty and Joy of Computing', 101, 'An introduction to the beauty and joy of computing. The history, social implications, great principles, and future of computing. Beautiful applications that have changed the world. How computing empowers discovery and progress in other fields. Relevance of computing to the student and society will be emphasized. Students will learn the joy of programming a computer using a friendly, graphical language, and will complete a substantial team programming project related to their interests.', 'F 9:00A-10:00A', '6', 'Evans', 'DIS', 0, 0),
(25681, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 134, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'W 1:00-2:00P', '85', 'Evans', 'DIS', 0, 0),
(25682, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 131, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'M 4:00P-5:00P', '3', 'Evans', 'DIS', 0, 0),
(25683, 'CS 10', 'The Beauty and Joy of Computing', 102, 'An introduction to the beauty and joy of computing. The history, social implications, great principles, and future of computing. Beautiful applications that have changed the world. How computing empowers discovery and progress in other fields. Relevance of computing to the student and society will be emphasized. Students will learn the joy of programming a computer using a friendly, graphical language, and will complete a substantial team programming project related to their interests.', 'WF 1:00-3:00P', '200', 'Sutardja Dai', 'LAB', 0, 0),
(25685, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 32, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'TH 12:00P-2:00P', '277', 'Soda', 'LAB', 0, 0),
(25686, 'CS 10', 'The Beauty and Joy of Computing', 102, 'An introduction to the beauty and joy of computing. The history, social implications, great principles, and future of computing. Beautiful applications that have changed the world. How computing empowers discovery and progress in other fields. Relevance of computing to the student and society will be emphasized. Students will learn the joy of programming a computer using a friendly, graphical language, and will complete a substantial team programming project related to their interests.', 'F 10:00A-11:00A', '3109', 'Etcheverry', 'DIS', 0, 0),
(25688, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 132, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'TU 1:00-2:00P', '105', 'Latimer', 'DIS', 0, 0),
(25689, 'CS 10', 'The Beauty and Joy of Computing', 103, 'An introduction to the beauty and joy of computing. The history, social implications, great principles, and future of computing. Beautiful applications that have changed the world. How computing empowers discovery and progress in other fields. Relevance of computing to the student and society will be emphasized. Students will learn the joy of programming a computer using a friendly, graphical language, and will complete a substantial team programming project related to their interests.', 'MW 4:00P-6:00P', '200', 'Sutardja Dai', 'LAB', 0, 0),
(25692, 'CS 10', 'The Beauty and Joy of Computing', 103, 'An introduction to the beauty and joy of computing. The history, social implications, great principles, and future of computing. Beautiful applications that have changed the world. How computing empowers discovery and progress in other fields. Relevance of computing to the student and society will be emphasized. Students will learn the joy of programming a computer using a friendly, graphical language, and will complete a substantial team programming project related to their interests.', 'F 11:00A-12:00P', '3105', 'Etcheverry', 'DIS', 0, 0),
(25695, 'CS 10', 'The Beauty and Joy of Computing', 104, 'An introduction to the beauty and joy of computing. The history, social implications, great principles, and future of computing. Beautiful applications that have changed the world. How computing empowers discovery and progress in other fields. Relevance of computing to the student and society will be emphasized. Students will learn the joy of programming a computer using a friendly, graphical language, and will complete a substantial team programming project related to their interests.', 'MW 6:00P-8:00P', '200', 'Sutardja Dai', 'LAB', 0, 0),
(25696, 'CS 188', 'Introduction to Artificial Intelligence', 112, 'Ideas and techniques underlying the design of intelligent computer systems. Topics include search, game playing, knowledge representation, inference, planning, reasoning under uncertainty, machine learning, robotics, perception, and language understanding.', 'M 5:00P-6:00P', 'B51', 'Hildebrand', 'DIS', 0, 0),
(25697, 'CS 170', 'Introduction to CS Theory', 115, 'Concept and basic techniques in the design and analysis of algorithms; models of computation; lower bounds; algorithms for optimum search trees, balanced trees and UNION-FIND algorithms; numerical and algebraic algorithms; combinatorial algorithms. Turing machines, how to count steps, deterministic and nondeterministic Turing machines, NP-completeness. Unsolvable and intractable problems.', 'F 10:00A-11:00A', '3111', 'Etcheverry', 'DIS', 0, 0),
(25698, 'CS 10', 'The Beauty and Joy of Computing', 104, 'An introduction to the beauty and joy of computing. The history, social implications, great principles, and future of computing. Beautiful applications that have changed the world. How computing empowers discovery and progress in other fields. Relevance of computing to the student and society will be emphasized. Students will learn the joy of programming a computer using a friendly, graphical language, and will complete a substantial team programming project related to their interests.', 'F 12:00P-1:00P', '3105', 'Etcheverry', 'DIS', 0, 0),
(25699, 'CS 61A', 'Structure and Interpretation of Computer Programs', 39, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TU 11:00A-12:30P', '277', 'Soda', 'LAB', 0, 0),
(25700, 'CS 170', 'Introduction to CS Theory', 116, 'Concept and basic techniques in the design and analysis of algorithms; models of computation; lower bounds; algorithms for optimum search trees, balanced trees and UNION-FIND algorithms; numerical and algebraic algorithms; combinatorial algorithms. Turing machines, how to count steps, deterministic and nondeterministic Turing machines, NP-completeness. Unsolvable and intractable problems.', 'TH 3:00-4:00P', '2070', 'VLSB', 'DIS', 0, 0),
(25701, 'CS 10', 'The Beauty and Joy of Computing', 105, 'An introduction to the beauty and joy of computing. The history, social implications, great principles, and future of computing. Beautiful applications that have changed the world. How computing empowers discovery and progress in other fields. Relevance of computing to the student and society will be emphasized. Students will learn the joy of programming a computer using a friendly, graphical language, and will complete a substantial team programming project related to their interests.', 'TuTh 9:00A-11:00A', '200', 'Sutardja Dai', 'LAB', 0, 0),
(25702, 'CS 61A', 'Structure and Interpretation of Computer Programs', 40, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TU 12:30-2:00P', '277', 'Soda', 'LAB', 0, 0),
(25703, 'CS 170', 'Introduction to CS Theory', 117, 'Concept and basic techniques in the design and analysis of algorithms; models of computation; lower bounds; algorithms for optimum search trees, balanced trees and UNION-FIND algorithms; numerical and algebraic algorithms; combinatorial algorithms. Turing machines, how to count steps, deterministic and nondeterministic Turing machines, NP-completeness. Unsolvable and intractable problems.', 'TH 4:00-5:00P', '2066', 'VLSB', 'DIS', 0, 0),
(25704, 'CS 10', 'The Beauty and Joy of Computing', 105, 'An introduction to the beauty and joy of computing. The history, social implications, great principles, and future of computing. Beautiful applications that have changed the world. How computing empowers discovery and progress in other fields. Relevance of computing to the student and society will be emphasized. Students will learn the joy of programming a computer using a friendly, graphical language, and will complete a substantial team programming project related to their interests.', 'F 1:00P-2:00P', '3111', 'Etcheverry', 'DIS', 0, 0),
(25705, 'CS 61A', 'Structure and Interpretation of Computer Programs', 41, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TU 2:00-3:30P', '277', 'Soda', 'LAB', 0, 0),
(25706, 'CS 61A', 'Structure and Interpretation of Computer Programs', 45, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'W 11:00A-12:30P', '277', 'Soda', 'LAB', 0, 0),
(25707, 'CS 10', 'The Beauty and Joy of Computing', 106, 'An introduction to the beauty and joy of computing. The history, social implications, great principles, and future of computing. Beautiful applications that have changed the world. How computing empowers discovery and progress in other fields. Relevance of computing to the student and society will be emphasized. Students will learn the joy of programming a computer using a friendly, graphical language, and will complete a substantial team programming project related to their interests.', 'TuTh 11:00A-1:00P', '200', 'Sutardja Dai', 'LAB', 0, 0),
(25708, 'CS 61A', 'Structure and Interpretation of Computer Programs', 42, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TU 3:30-5:00P', '277', 'Soda', 'LAB', 0, 0),
(25709, 'CS 61A', 'Structure and Interpretation of Computer Programs', 144, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'F 9:30-11:00A', '310', 'Soda', 'DIS', 0, 0),
(25710, 'CS 10', 'The Beauty and Joy of Computing', 106, 'An introduction to the beauty and joy of computing. The history, social implications, great principles, and future of computing. Beautiful applications that have changed the world. How computing empowers discovery and progress in other fields. Relevance of computing to the student and society will be emphasized. Students will learn the joy of programming a computer using a friendly, graphical language, and will complete a substantial team programming project related to their interests.', 'F 2:00P-3:00P', '310', 'Soda', 'DIS', 0, 0),
(25711, 'CS 61A', 'Structure and Interpretation of Computer Programs', 43, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TU 5:00-6:30P', '277', 'Soda', 'LAB', 0, 0),
(25712, 'CS 61A', 'Structure and Interpretation of Computer Programs', 145, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'F 11:00A-12:30P', '310', 'Soda', 'DIS', 0, 0),
(25713, 'CS 10', 'The Beauty and Joy of Computing', 107, 'An introduction to the beauty and joy of computing. The history, social implications, great principles, and future of computing. Beautiful applications that have changed the world. How computing empowers discovery and progress in other fields. Relevance of computing to the student and society will be emphasized. Students will learn the joy of programming a computer using a friendly, graphical language, and will complete a substantial team programming project related to their interests.', 'TuTh 1:00-3:00P', '200', 'Sutardja Dai', 'LAB', 0, 0),
(25714, 'CS 61A', 'Structure and Interpretation of Computer Programs', 44, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'W 9:30-11:00A', '277', 'Soda', 'LAB', 0, 0),
(25715, 'CS 61A', 'Structure and Interpretation of Computer Programs', 138, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TH 9:30-11:00A', '200', 'Wheeler', 'DIS', 0, 0),
(25716, 'CS 10', 'The Beauty and Joy of Computing', 107, 'An introduction to the beauty and joy of computing. The history, social implications, great principles, and future of computing. Beautiful applications that have changed the world. How computing empowers discovery and progress in other fields. Relevance of computing to the student and society will be emphasized. Students will learn the joy of programming a computer using a friendly, graphical language, and will complete a substantial team programming project related to their interests.', 'F 3:00P-4:00P', '310', 'Soda', 'DIS', 0, 0),
(25717, 'CS 61A', 'Structure and Interpretation of Computer Programs', 46, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'W 12:30-2:00P', '277', 'Soda', 'LAB', 0, 0),
(25718, 'CS 61A', 'Structure and Interpretation of Computer Programs', 139, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TH 11:00A-12:30P', '102', 'Latimer', 'DIS', 0, 0),
(25719, 'CS 10', 'The Beauty and Joy of Computing', 108, 'An introduction to the beauty and joy of computing. The history, social implications, great principles, and future of computing. Beautiful applications that have changed the world. How computing empowers discovery and progress in other fields. Relevance of computing to the student and society will be emphasized. Students will learn the joy of programming a computer using a friendly, graphical language, and will complete a substantial team programming project related to their interests.', 'TuTh 3:00P-5:00P', '200', 'Sutardja Dai', 'LAB', 0, 0),
(25720, 'CS 61A', 'Structure and Interpretation of Computer Programs', 146, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'F 12:30-2:00P', '310', 'Soda', 'DIS', 0, 0),
(25721, 'CS 61A', 'Structure and Interpretation of Computer Programs', 140, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TH 12:30-2:00P', '3111', 'Etcheverry', 'DIS', 0, 0),
(25722, 'CS 10', 'The Beauty and Joy of Computing', 108, 'An introduction to the beauty and joy of computing. The history, social implications, great principles, and future of computing. Beautiful applications that have changed the world. How computing empowers discovery and progress in other fields. Relevance of computing to the student and society will be emphasized. Students will learn the joy of programming a computer using a friendly, graphical language, and will complete a substantial team programming project related to their interests.', 'F 4:00P-5:00P', '310', 'Soda', 'DIS', 0, 0),
(25723, 'CS 61A', 'Structure and Interpretation of Computer Programs', 141, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TH 2:00-3:30P', '238', 'Kroeber', 'DIS', 0, 0),
(25724, 'CS 61A', 'Structure and Interpretation of Computer Programs', 142, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TH 3:30-5:00P', '310', 'HMMB', 'DIS', 0, 0),
(25725, 'CS 10', 'The Beauty and Joy of Computing', 109, 'An introduction to the beauty and joy of computing. The history, social implications, great principles, and future of computing. Beautiful applications that have changed the world. How computing empowers discovery and progress in other fields. Relevance of computing to the student and society will be emphasized. Students will learn the joy of programming a computer using a friendly, graphical language, and will complete a substantial team programming project related to their interests.', 'TuTh 5:00P-7:00P', '200', 'Sutardja Dai', 'LAB', 0, 0),
(25726, 'CS 61A', 'Structure and Interpretation of Computer Programs', 143, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TH 5:00-6:30P', '3', 'Evans', 'DIS', 0, 0),
(25727, 'CS 188', 'Introduction to Artificial Intelligence', 113, 'Ideas and techniques underlying the design of intelligent computer systems. Topics include search, game playing, knowledge representation, inference, planning, reasoning under uncertainty, machine learning, robotics, perception, and language understanding.', 'M 11:00A-12:00P', '9', 'Evans', 'DIS', 0, 0),
(25728, 'CS 10', 'The Beauty and Joy of Computing', 109, 'An introduction to the beauty and joy of computing. The history, social implications, great principles, and future of computing. Beautiful applications that have changed the world. How computing empowers discovery and progress in other fields. Relevance of computing to the student and society will be emphasized. Students will learn the joy of programming a computer using a friendly, graphical language, and will complete a substantial team programming project related to their interests.', 'F 5:00P-6:00P', '310', 'Soda', 'DIS', 0, 0),
(25729, 'CS 61A', 'Structure and Interpretation of Computer Programs', 47, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TU 11:00A-12:30P', '330', 'Soda', 'LAB', 0, 0),
(25730, 'CS 188', 'Introduction to Artificial Intelligence', 114, 'Ideas and techniques underlying the design of intelligent computer systems. Topics include search, game playing, knowledge representation, inference, planning, reasoning under uncertainty, machine learning, robotics, perception, and language understanding.', 'M 3:00P-4:00P', '75', 'Evans', 'DIS', 0, 0),
(25731, 'CS 10', 'The Beauty and Joy of Computing', 110, 'An introduction to the beauty and joy of computing. The history, social implications, great principles, and future of computing. Beautiful applications that have changed the world. How computing empowers discovery and progress in other fields. Relevance of computing to the student and society will be emphasized. Students will learn the joy of programming a computer using a friendly, graphical language, and will complete a substantial team programming project related to their interests.', 'WF 9:00A-11:00A', '200', 'Sutardja Dai', 'LAB', 0, 0),
(25732, 'CS 61A', 'Structure and Interpretation of Computer Programs', 48, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TU 12:30-2:00P', '330', 'Soda', 'LAB', 0, 0),
(25733, 'CS 61A', 'Structure and Interpretation of Computer Programs', 147, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TH 11:00A-12:30P', '70', 'Evans', 'DIS', 0, 0),
(25734, 'CS 10', 'The Beauty and Joy of Computing', 110, 'An introduction to the beauty and joy of computing. The history, social implications, great principles, and future of computing. Beautiful applications that have changed the world. How computing empowers discovery and progress in other fields. Relevance of computing to the student and society will be emphasized. Students will learn the joy of programming a computer using a friendly, graphical language, and will complete a substantial team programming project related to their interests.', 'F 6:00P-7:00P', '310', 'Soda', 'DIS', 0, 0),
(25735, 'CS 61A', 'Structure and Interpretation of Computer Programs', 49, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TU 3:30-5:00P', '330', 'Soda', 'LAB', 0, 0),
(25736, 'CS 10', 'The Beauty and Joy of Computing', 111, 'An introduction to the beauty and joy of computing. The history, social implications, great principles, and future of computing. Beautiful applications that have changed the world. How computing empowers discovery and progress in other fields. Relevance of computing to the student and society will be emphasized. Students will learn the joy of programming a computer using a friendly, graphical language, and will complete a substantial team programming project related to their interests.', 'M 9:00-11:00A; F 3:00-5:00P', '200', 'Sutardja Dai', 'LAB', 0, 0),
(25738, 'CS 61A', 'Structure and Interpretation of Computer Programs', 148, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TH 12:30-2:00P', '110', 'Barker', 'DIS', 0, 0),
(25740, 'CS 39S', 'Photographic Technique in the Free Speech Movement and Today', 1, 'Unavailable', 'TU 12:00P-2:00P', '606', 'Soda', 'SEM', 0, 0),
(25741, 'CS 61A', 'Structure and Interpretation of Computer Programs', 149, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TH 3:30-5:00P', '310', 'Soda', 'DIS', 0, 0),
(25743, 'CS 47A', 'Interpretation of Computer Programs', 1, 'Implementation of generic operations. Streams and iterators. Implementation techniques for supporting functional, object-oriented, and constraint-based programming in the Scheme programming language. Together with 9D, 47A constitutes an abbreviated, self-paced version of 61A for students who have already taken a course equivalent to 61B.', 'None', '200A', 'Sutardja Dai', 'SLF', 1, 0),
(25744, 'CS C149', 'Introduction to Embedded Systems', 105, 'This course introduces students to the basics of models, analysis tools, and control for embedded systems operating in real time. Students learn how to combine physical processes with computation. Topics include models of computation, control, analysis and verification, interfacing with the physical world, mapping to platforms, and distributed embedded systems. The course has a strong laboratory component, with emphasis on a semester-long sequence of projects. Also listed as Electrical Engineering C149.', 'TU 3:30-6:30P', '204', 'Cory', 'LAB', 0, 0),
(25745, 'CS C249A', 'Introduction to Embedded Systems', 105, 'This course introduces students to the basics of models, analysis tools, and control for embedded systems operating in real time. Students learn how to combine physical processes with computation. Topics include models of computation, control, analysis and verification, interfacing with the physical world, mapping to platforms, and distributed embedded systems. The course has a strong laboratory component, with emphasis on a semester-long sequence of projects. Also listed as Electrical Engineering C249A.', 'TU 3:30-6:30P', '204', 'Cory', 'LAB', 0, 0),
(25746, 'CS 47B', 'Data Structures', 1, 'Iterators. Hashing, applied to strings and multi-dimensional structures. Heaps. Storage management. Design and implementation of a program containing hundreds of lines of code. Students with sufficient partial credit in 61B may, with consent of instructor, complete the credit in this self-paced course.', 'None', '200A', 'Sutardja Dai', 'SLF', 1, 0),
(25747, 'CS 98', 'Tactical Thinking and Tabletop Gaming', 36, 'Seminars for group study of selected topics, which will vary from year to year. Intended for students in the lower division.', 'M 5:00P-8:00P', '2062', 'VLSB', 'GRP', 2, 0),
(25748, 'CS 198', 'Tactical Thinking and Tabletop Gaming', 36, 'Group study of selected topics in Computer Sciences, usually relating to new developments.', 'M 5:00P-8:00P', '2062', 'VLSB', 'GRP', 2, 0),
(25749, 'CS 47C', 'Machine Structures', 1, 'MIPS instruction set simulation. The assembly and linking process. Caches and virtual memory. Pipelined computer organization. Students with sufficient partial credit in 61C may, with consent of instructor, complete the credit in this self-paced course.', 'None', '200A', 'Sutardja Dai', 'SLF', 1, 0),
(25752, 'CS 61A', 'Structure and Interpretation of Computer Programs', 1, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'MWF 2:00P-3:00P', '150', 'Wheeler', 'LEC', 4, 15);
INSERT INTO `Courses` (`CCN`, `Course_Code`, `Course_Title`, `Section_No`, `Description`, `Time`, `Room_No`, `Building_Name`, `Course_Type`, `Units`, `Exam`) VALUES
(25755, 'CS 61A', 'Structure and Interpretation of Computer Programs', 11, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TU 9:30A-11:00A', '271', 'Soda', 'LAB', 0, 0),
(25757, 'CS 61B', 'Data Structures', 25, 'Fundamental dynamic data structures, including linear lists, queues, trees, and other linked structures; arrays strings, and hash tables. Storage management. Elementary principles of software engineering. Abstract data types. Algorithms for sorting and searching. Introduction to the Java programming language.', 'W 4:00P-6:00P', '271', 'Soda', 'LAB', 0, 0),
(25758, 'CS 61A', 'Structure and Interpretation of Computer Programs', 111, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TH 9:30A-11:00A', '71', 'Evans', 'DIS', 0, 0),
(25760, 'CS 61B', 'Data Structures', 124, 'Fundamental dynamic data structures, including linear lists, queues, trees, and other linked structures; arrays strings, and hash tables. Storage management. Elementary principles of software engineering. Abstract data types. Algorithms for sorting and searching. Introduction to the Java programming language.', 'TU 12:00-1:00P', '320', 'Soda', 'DIS', 0, 0),
(25761, 'CS 61A', 'Structure and Interpretation of Computer Programs', 12, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TU 9:30A-11:00A', '273', 'Soda', 'LAB', 0, 0),
(25762, 'CS 61B', 'Data Structures', 125, 'Fundamental dynamic data structures, including linear lists, queues, trees, and other linked structures; arrays strings, and hash tables. Storage management. Elementary principles of software engineering. Abstract data types. Algorithms for sorting and searching. Introduction to the Java programming language.', 'TU 1:00-2:00P', '320', 'Soda', 'DIS', 0, 0),
(25764, 'CS 61A', 'Structure and Interpretation of Computer Programs', 112, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TH 9:30A-11:00A', '85', 'Evans', 'DIS', 0, 0),
(25767, 'CS 61A', 'Structure and Interpretation of Computer Programs', 13, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TU 9:30A-11:00A', '275', 'Soda', 'LAB', 0, 0),
(25770, 'CS 61A', 'Structure and Interpretation of Computer Programs', 113, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TH 9:30A-11:00A', '75', 'Evans', 'DIS', 0, 0),
(25771, 'CS 98', 'Introduction to Teaching Computer Science', 48, 'Seminars for group study of selected topics, which will vary from year to year. Intended for students in the lower division.', 'TH 5:00-6:30P', '310', 'Soda', 'GRP', 2, 0),
(25772, 'CS 198', 'Introduction to Teaching Computer Science', 48, 'Group study of selected topics in Computer Sciences, usually relating to new developments.', 'TH 5:00-6:30P', '310', 'Soda', 'GRP', 2, 0),
(25773, 'CS 61A', 'Structure and Interpretation of Computer Programs', 14, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TU 11:00A-12:30P', '271', 'Soda', 'LAB', 0, 0),
(25774, 'CS 98', 'Introduction to Teaching Computer Science', 49, 'Seminars for group study of selected topics, which will vary from year to year. Intended for students in the lower division.', 'SU 2:00-3:30P', '310', 'Soda', 'GRP', 2, 0),
(25775, 'CS 198', 'Introduction to Teaching Computer Science', 49, 'Group study of selected topics in Computer Sciences, usually relating to new developments.', 'SU 2:00-3:30P', '310', 'Soda', 'GRP', 2, 0),
(25776, 'CS 61A', 'Structure and Interpretation of Computer Programs', 114, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TH 11:00A-12:30P', '4', 'Evans', 'DIS', 0, 0),
(25778, 'CS 98', 'Free Ventures', 41, 'Seminars for group study of selected topics, which will vary from year to year. Intended for students in the lower division.', 'MW 7:00P-9:00P', '494', 'SE Wurster', 'GRP', 2, 0),
(25779, 'CS 61A', 'Structure and Interpretation of Computer Programs', 15, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TU 11:00A-12:30P', '273', 'Soda', 'LAB', 0, 0),
(25781, 'CS 198', 'Free Ventures', 41, 'Group study of selected topics in Computer Sciences, usually relating to new developments.', 'MW 7:00P-9:00P', '494', 'SE Wurster', 'GRP', 2, 0),
(25782, 'CS 61A', 'Structure and Interpretation of Computer Programs', 115, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TH 11:00A-12:30P', '2', 'Evans', 'DIS', 0, 0),
(25785, 'CS 61A', 'Structure and Interpretation of Computer Programs', 16, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TU 11:00A-12:30P', '275', 'Soda', 'LAB', 0, 0),
(25788, 'CS 61A', 'Structure and Interpretation of Computer Programs', 116, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TH 11:00A-12:30P', '75', 'Evans', 'DIS', 0, 0),
(25791, 'CS 61A', 'Structure and Interpretation of Computer Programs', 17, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TU 12:30P-2:00P', '271', 'Soda', 'LAB', 0, 0),
(25794, 'CS 61A', 'Structure and Interpretation of Computer Programs', 117, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TH 12:30P-2:00P', '85', 'Evans', 'DIS', 0, 0),
(25797, 'CS 61A', 'Structure and Interpretation of Computer Programs', 18, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TU 12:30P-2:00P', '273', 'Soda', 'LAB', 0, 0),
(25800, 'CS 61A', 'Structure and Interpretation of Computer Programs', 118, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TH 12:30P-2:00P', '3', 'Evans', 'DIS', 0, 0),
(25803, 'CS 61A', 'Structure and Interpretation of Computer Programs', 19, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TU 12:30P-2:00P', '275', 'Soda', 'LAB', 0, 0),
(25806, 'CS 61A', 'Structure and Interpretation of Computer Programs', 119, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TH 12:30P-2:00P', '87', 'Evans', 'DIS', 0, 0),
(25809, 'CS 61A', 'Structure and Interpretation of Computer Programs', 20, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TU 2:00P-3:30P', '271', 'Soda', 'LAB', 0, 0),
(25812, 'CS 61A', 'Structure and Interpretation of Computer Programs', 120, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TH 2:00P-3:30P', '71', 'Evans', 'DIS', 0, 0),
(25815, 'CS 61A', 'Structure and Interpretation of Computer Programs', 21, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TU 2:00P-3:30P', '273', 'Soda', 'LAB', 0, 0),
(25818, 'CS 61A', 'Structure and Interpretation of Computer Programs', 121, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TH 2:00P-3:30P', '6', 'Evans', 'DIS', 0, 0),
(25821, 'CS 61A', 'Structure and Interpretation of Computer Programs', 22, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TU 2:00P-3:30P', '275', 'Soda', 'LAB', 0, 0),
(25824, 'CS 61A', 'Structure and Interpretation of Computer Programs', 122, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TH 2:00P-3:30P', '75', 'Evans', 'DIS', 0, 0),
(25827, 'CS 61A', 'Structure and Interpretation of Computer Programs', 23, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TU 3:30P-5:00P', '271', 'Soda', 'LAB', 0, 0),
(25830, 'CS 61A', 'Structure and Interpretation of Computer Programs', 123, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TH 3:30P-5:00P', '75', 'Evans', 'DIS', 0, 0),
(25833, 'CS 61A', 'Structure and Interpretation of Computer Programs', 24, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TU 3:30P-5:00P', '273', 'Soda', 'LAB', 0, 0),
(25836, 'CS 61A', 'Structure and Interpretation of Computer Programs', 124, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TH 3:30P-5:00P', '105', 'Latimer', 'DIS', 0, 0),
(25839, 'CS 61A', 'Structure and Interpretation of Computer Programs', 25, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TU 3:30P-5:00P', '275', 'Soda', 'LAB', 0, 0),
(25842, 'CS 61A', 'Structure and Interpretation of Computer Programs', 125, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TH 3:30P-5:00P', 'B56', 'Hildebrand', 'DIS', 0, 0),
(25845, 'CS 61A', 'Structure and Interpretation of Computer Programs', 26, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TU 5:00P-6:30P', '271', 'Soda', 'LAB', 0, 0),
(25848, 'CS 61A', 'Structure and Interpretation of Computer Programs', 126, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TH 5:00P-6:30P', '71', 'Evans', 'DIS', 0, 0),
(25851, 'CS 61A', 'Structure and Interpretation of Computer Programs', 27, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TU 5:00P-6:30P', '273', 'Soda', 'LAB', 0, 0),
(25854, 'CS 61A', 'Structure and Interpretation of Computer Programs', 127, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TH 5:00P-6:30P', '4', 'Evans', 'DIS', 0, 0),
(25857, 'CS 61A', 'Structure and Interpretation of Computer Programs', 28, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TU 5:00P-6:30P', '275', 'Soda', 'LAB', 0, 0),
(25860, 'CS 61A', 'Structure and Interpretation of Computer Programs', 128, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TH 5:00P-6:30P', '6', 'Evans', 'DIS', 0, 0),
(25863, 'CS 61A', 'Structure and Interpretation of Computer Programs', 29, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TU 6:30P-8:00P', '271', 'Soda', 'LAB', 0, 0),
(25866, 'CS 61A', 'Structure and Interpretation of Computer Programs', 129, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TH 6:30P-8:00P', '4', 'Evans', 'DIS', 0, 0),
(25869, 'CS 61A', 'Structure and Interpretation of Computer Programs', 30, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TU 6:30P-8:00P', '273', 'Soda', 'LAB', 0, 0),
(25872, 'CS 61A', 'Structure and Interpretation of Computer Programs', 130, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TH 6:30P-8:00P', '2', 'Evans', 'DIS', 0, 0),
(25875, 'CS 61A', 'Structure and Interpretation of Computer Programs', 31, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TU 6:30P-8:00P', '275', 'Soda', 'LAB', 0, 0),
(25878, 'CS 61A', 'Structure and Interpretation of Computer Programs', 131, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TH 6:30P-8:00P', '6', 'Evans', 'DIS', 0, 0),
(25881, 'CS 61A', 'Structure and Interpretation of Computer Programs', 32, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'W 9:30A-11:00A', '271', 'Soda', 'LAB', 0, 0),
(25884, 'CS 61A', 'Structure and Interpretation of Computer Programs', 132, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'F 9:30A-11:00A', '320', 'Soda', 'DIS', 0, 0),
(25887, 'CS 61A', 'Structure and Interpretation of Computer Programs', 33, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'W 9:30A-11:00A', '275', 'Soda', 'LAB', 0, 0),
(25890, 'CS 61A', 'Structure and Interpretation of Computer Programs', 133, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'F 9:30A-11:00A', '405', 'Soda', 'DIS', 0, 0),
(25893, 'CS 61A', 'Structure and Interpretation of Computer Programs', 34, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'W 11:00A-12:30P', '271', 'Soda', 'LAB', 0, 0),
(25896, 'CS 61A', 'Structure and Interpretation of Computer Programs', 134, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'F 11:00A-12:30P', '320', 'Soda', 'DIS', 0, 0),
(25899, 'CS 61A', 'Structure and Interpretation of Computer Programs', 35, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'W 11:00A-12:30P', '275', 'Soda', 'LAB', 0, 0),
(25902, 'CS 61A', 'Structure and Interpretation of Computer Programs', 135, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'F 11:00A-12:30P', '405', 'Soda', 'DIS', 0, 0),
(25905, 'CS 61A', 'Structure and Interpretation of Computer Programs', 36, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'W 12:30P-2:00P', '271', 'Soda', 'LAB', 0, 0),
(25908, 'CS 61A', 'Structure and Interpretation of Computer Programs', 136, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'F 12:30P-2:00P', '320', 'Soda', 'DIS', 0, 0),
(25911, 'CS 61A', 'Structure and Interpretation of Computer Programs', 37, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'W 12:30P-2:00P', '275', 'Soda', 'LAB', 0, 0),
(25914, 'CS 61A', 'Structure and Interpretation of Computer Programs', 137, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'F 12:30P-2:00P', '405', 'Soda', 'DIS', 0, 0),
(25916, 'CS 61A', 'Structure and Interpretation of Computer Programs', 38, 'Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant progr', 'TU 9:30-11:00A', '277', 'Soda', 'LAB', 0, 0),
(25917, 'CS 61AS', 'The Structure and Interpretation of Computer Programs (Self-Pace', 1, 'Introductory programming and computer science. Abstraction as means to control program complexity. Programming paradigms: functional, object-oriented, client/server, and declarative (logic). Control abstraction: recursion and higher order functions. Introduction to asymptotic analysis of algorithms. Data abstraction: abstract data types, type-tagged data, first class data types, sequences implemented as lists and as arrays, generic operators implemented with data-directed programming and with message passin', 'MWF 9:00A-11:00A', '273', 'Soda', 'LAB', 1, 16),
(25920, 'CS 61AS', 'The Structure and Interpretation of Computer Programs (Self-Pace', 2, 'Introductory programming and computer science. Abstraction as means to control program complexity. Programming paradigms: functional, object-oriented, client/server, and declarative (logic). Control abstraction: recursion and higher order functions. Introduction to asymptotic analysis of algorithms. Data abstraction: abstract data types, type-tagged data, first class data types, sequences implemented as lists and as arrays, generic operators implemented with data-directed programming and with message passin', 'MWF 11:00A-1:00P', '273', 'Soda', 'LAB', 1, 2),
(25923, 'CS 61AS', 'The Structure and Interpretation of Computer Programs (Self-Pace', 3, 'Introductory programming and computer science. Abstraction as means to control program complexity. Programming paradigms: functional, object-oriented, client/server, and declarative (logic). Control abstraction: recursion and higher order functions. Introduction to asymptotic analysis of algorithms. Data abstraction: abstract data types, type-tagged data, first class data types, sequences implemented as lists and as arrays, generic operators implemented with data-directed programming and with message passin', 'MWF 1:00P-3:00P', '273', 'Soda', 'LAB', 1, 12),
(25926, 'CS 61B', 'Data Structures', 1, 'Fundamental dynamic data structures, including linear lists, queues, trees, and other linked structures; arrays strings, and hash tables. Storage management. Elementary principles of software engineering. Abstract data types. Algorithms for sorting and searching. Introduction to the Java programming language.', 'MWF 1:00P-2:00P', '155', 'Dwinelle', 'LEC', 4, 12),
(25928, 'CS 61B', 'Data Structures', 2, 'Fundamental dynamic data structures, including linear lists, queues, trees, and other linked structures; arrays strings, and hash tables. Storage management. Elementary principles of software engineering. Abstract data types. Algorithms for sorting and searching. Introduction to the Java programming language.', 'MWF 11:00A-12:00P', '10', 'Evans', 'LEC', 4, 2),
(25929, 'CS 61B', 'Data Structures', 11, 'Fundamental dynamic data structures, including linear lists, queues, trees, and other linked structures; arrays strings, and hash tables. Storage management. Elementary principles of software engineering. Abstract data types. Algorithms for sorting and searching. Introduction to the Java programming language.', 'W 2:00P-4:00P', '275', 'Soda', 'LAB', 0, 0),
(25932, 'CS 61B', 'Data Structures', 111, 'Fundamental dynamic data structures, including linear lists, queues, trees, and other linked structures; arrays strings, and hash tables. Storage management. Elementary principles of software engineering. Abstract data types. Algorithms for sorting and searching. Introduction to the Java programming language.', 'M 3:00P-4:00P', '4', 'Evans', 'DIS', 0, 0),
(25935, 'CS 61B', 'Data Structures', 12, 'Fundamental dynamic data structures, including linear lists, queues, trees, and other linked structures; arrays strings, and hash tables. Storage management. Elementary principles of software engineering. Abstract data types. Algorithms for sorting and searching. Introduction to the Java programming language.', 'W 4:00P-6:00P', '275', 'Soda', 'LAB', 0, 0),
(25938, 'CS 61B', 'Data Structures', 112, 'Fundamental dynamic data structures, including linear lists, queues, trees, and other linked structures; arrays strings, and hash tables. Storage management. Elementary principles of software engineering. Abstract data types. Algorithms for sorting and searching. Introduction to the Java programming language.', 'M 4:00P-5:00P', '4', 'Evans', 'DIS', 0, 0),
(25941, 'CS 61B', 'Data Structures', 13, 'Fundamental dynamic data structures, including linear lists, queues, trees, and other linked structures; arrays strings, and hash tables. Storage management. Elementary principles of software engineering. Abstract data types. Algorithms for sorting and searching. Introduction to the Java programming language.', 'TH 8:00A-10:00A', '275', 'Soda', 'LAB', 0, 0),
(25944, 'CS 61B', 'Data Structures', 113, 'Fundamental dynamic data structures, including linear lists, queues, trees, and other linked structures; arrays strings, and hash tables. Storage management. Elementary principles of software engineering. Abstract data types. Algorithms for sorting and searching. Introduction to the Java programming language.', 'TU 9:00A-10:00A', '71', 'Evans', 'DIS', 0, 0),
(25947, 'CS 61B', 'Data Structures', 14, 'Fundamental dynamic data structures, including linear lists, queues, trees, and other linked structures; arrays strings, and hash tables. Storage management. Elementary principles of software engineering. Abstract data types. Algorithms for sorting and searching. Introduction to the Java programming language.', 'TH 10:00A-12:00P', '275', 'Soda', 'LAB', 0, 0),
(25950, 'CS 61B', 'Data Structures', 114, 'Fundamental dynamic data structures, including linear lists, queues, trees, and other linked structures; arrays strings, and hash tables. Storage management. Elementary principles of software engineering. Abstract data types. Algorithms for sorting and searching. Introduction to the Java programming language.', 'TU 10:00A-11:00A', '71', 'Evans', 'DIS', 0, 0),
(25953, 'CS 61B', 'Data Structures', 15, 'Fundamental dynamic data structures, including linear lists, queues, trees, and other linked structures; arrays strings, and hash tables. Storage management. Elementary principles of software engineering. Abstract data types. Algorithms for sorting and searching. Introduction to the Java programming language.', 'TH 12:00P-2:00P', '275', 'Soda', 'LAB', 0, 0),
(25956, 'CS 61B', 'Data Structures', 115, 'Fundamental dynamic data structures, including linear lists, queues, trees, and other linked structures; arrays strings, and hash tables. Storage management. Elementary principles of software engineering. Abstract data types. Algorithms for sorting and searching. Introduction to the Java programming language.', 'TU 1:00P-2:00P', '85', 'Evans', 'DIS', 0, 0),
(25959, 'CS 61B', 'Data Structures', 16, 'Fundamental dynamic data structures, including linear lists, queues, trees, and other linked structures; arrays strings, and hash tables. Storage management. Elementary principles of software engineering. Abstract data types. Algorithms for sorting and searching. Introduction to the Java programming language.', 'TH 2:00P-4:00P', '275', 'Soda', 'LAB', 0, 0),
(25962, 'CS 61B', 'Data Structures', 116, 'Fundamental dynamic data structures, including linear lists, queues, trees, and other linked structures; arrays strings, and hash tables. Storage management. Elementary principles of software engineering. Abstract data types. Algorithms for sorting and searching. Introduction to the Java programming language.', 'TU 2:00P-3:00P', '87', 'Evans', 'DIS', 0, 0),
(25965, 'CS 61B', 'Data Structures', 17, 'Fundamental dynamic data structures, including linear lists, queues, trees, and other linked structures; arrays strings, and hash tables. Storage management. Elementary principles of software engineering. Abstract data types. Algorithms for sorting and searching. Introduction to the Java programming language.', 'TH 4:00P-6:00P', '275', 'Soda', 'LAB', 0, 0),
(25968, 'CS 61B', 'Data Structures', 117, 'Fundamental dynamic data structures, including linear lists, queues, trees, and other linked structures; arrays strings, and hash tables. Storage management. Elementary principles of software engineering. Abstract data types. Algorithms for sorting and searching. Introduction to the Java programming language.', 'TU 5:00P-6:00P', '4', 'Evans', 'DIS', 0, 0),
(25971, 'CS 61B', 'Data Structures', 18, 'Fundamental dynamic data structures, including linear lists, queues, trees, and other linked structures; arrays strings, and hash tables. Storage management. Elementary principles of software engineering. Abstract data types. Algorithms for sorting and searching. Introduction to the Java programming language.', 'TH 6:00P-8:00P', '275', 'Soda', 'LAB', 0, 0),
(25974, 'CS 61B', 'Data Structures', 118, 'Fundamental dynamic data structures, including linear lists, queues, trees, and other linked structures; arrays strings, and hash tables. Storage management. Elementary principles of software engineering. Abstract data types. Algorithms for sorting and searching. Introduction to the Java programming language.', 'TU 6:00P-7:00P', '4', 'Evans', 'DIS', 0, 0),
(25977, 'CS 61B', 'Data Structures', 19, 'Fundamental dynamic data structures, including linear lists, queues, trees, and other linked structures; arrays strings, and hash tables. Storage management. Elementary principles of software engineering. Abstract data types. Algorithms for sorting and searching. Introduction to the Java programming language.', 'TH 8:00P-10:00P', '275', 'Soda', 'LAB', 0, 0),
(25980, 'CS 61B', 'Data Structures', 119, 'Fundamental dynamic data structures, including linear lists, queues, trees, and other linked structures; arrays strings, and hash tables. Storage management. Elementary principles of software engineering. Abstract data types. Algorithms for sorting and searching. Introduction to the Java programming language.', 'TU 7:00P-8:00P', '2', 'Evans', 'DIS', 0, 0),
(25983, 'CS 61B', 'Data Structures', 20, 'Fundamental dynamic data structures, including linear lists, queues, trees, and other linked structures; arrays strings, and hash tables. Storage management. Elementary principles of software engineering. Abstract data types. Algorithms for sorting and searching. Introduction to the Java programming language.', 'F 9:00A-11:00A', '275', 'Soda', 'LAB', 0, 0),
(25986, 'CS 61B', 'Data Structures', 120, 'Fundamental dynamic data structures, including linear lists, queues, trees, and other linked structures; arrays strings, and hash tables. Storage management. Elementary principles of software engineering. Abstract data types. Algorithms for sorting and searching. Introduction to the Java programming language.', 'W 10:00A-11:00A', '75', 'Evans', 'DIS', 0, 0),
(25989, 'CS 61B', 'Data Structures', 21, 'Fundamental dynamic data structures, including linear lists, queues, trees, and other linked structures; arrays strings, and hash tables. Storage management. Elementary principles of software engineering. Abstract data types. Algorithms for sorting and searching. Introduction to the Java programming language.', 'F 11:00A-1:00P', '275', 'Soda', 'LAB', 0, 0),
(25992, 'CS 61B', 'Data Structures', 121, 'Fundamental dynamic data structures, including linear lists, queues, trees, and other linked structures; arrays strings, and hash tables. Storage management. Elementary principles of software engineering. Abstract data types. Algorithms for sorting and searching. Introduction to the Java programming language.', 'W 11:00A-12:00P', '87', 'Evans', 'DIS', 0, 0),
(25995, 'CS 61B', 'Data Structures', 22, 'Fundamental dynamic data structures, including linear lists, queues, trees, and other linked structures; arrays strings, and hash tables. Storage management. Elementary principles of software engineering. Abstract data types. Algorithms for sorting and searching. Introduction to the Java programming language.', 'TH 9:00A-11:00A', '271', 'Soda', 'LAB', 0, 0);
INSERT INTO `Courses` (`CCN`, `Course_Code`, `Course_Title`, `Section_No`, `Description`, `Time`, `Room_No`, `Building_Name`, `Course_Type`, `Units`, `Exam`) VALUES
(25998, 'CS 61B', 'Data Structures', 122, 'Fundamental dynamic data structures, including linear lists, queues, trees, and other linked structures; arrays strings, and hash tables. Storage management. Elementary principles of software engineering. Abstract data types. Algorithms for sorting and searching. Introduction to the Java programming language.', 'TU 10:00A-11:00A', '75', 'Evans', 'DIS', 0, 0),
(26001, 'CS 61B', 'Data Structures', 23, 'Fundamental dynamic data structures, including linear lists, queues, trees, and other linked structures; arrays strings, and hash tables. Storage management. Elementary principles of software engineering. Abstract data types. Algorithms for sorting and searching. Introduction to the Java programming language.', 'TH 11:00A-1:00P', '271', 'Soda', 'LAB', 0, 0),
(26004, 'CS 61B', 'Data Structures', 123, 'Fundamental dynamic data structures, including linear lists, queues, trees, and other linked structures; arrays strings, and hash tables. Storage management. Elementary principles of software engineering. Abstract data types. Algorithms for sorting and searching. Introduction to the Java programming language.', 'TU 11:00A-12:00P', '2', 'Evans', 'DIS', 0, 0),
(26006, 'CS 61B', 'Data Structures', 24, 'Fundamental dynamic data structures, including linear lists, queues, trees, and other linked structures; arrays strings, and hash tables. Storage management. Elementary principles of software engineering. Abstract data types. Algorithms for sorting and searching. Introduction to the Java programming language.', 'TH 1:00-3:00P', '271', 'Soda', 'LAB', 0, 0),
(26007, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 1, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'MWF 3:00P-4:00P', '150', 'Wheeler', 'LEC', 4, 8),
(26010, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 11, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'W 4:00P-6:00P', '330', 'Soda', 'LAB', 0, 0),
(26013, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 111, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'M 5:00P-6:00P', '4', 'Evans', 'DIS', 0, 0),
(26016, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 12, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'W 6:00P-8:00P', '330', 'Soda', 'LAB', 0, 0),
(26019, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 112, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'M 6:00P-7:00P', '2', 'Evans', 'DIS', 0, 0),
(26022, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 13, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'W 8:00P-10:00P', '330', 'Soda', 'LAB', 0, 0),
(26025, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 113, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'M 7:00P-8:00P', '2', 'Evans', 'DIS', 0, 0),
(26028, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 14, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'TH 8:00A-10:00A', '330', 'Soda', 'LAB', 0, 0),
(26031, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 114, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'TU 9:00A-10:00A', '75', 'Evans', 'DIS', 0, 0),
(26034, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 15, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'TH 10:00A-12:00P', '330', 'Soda', 'LAB', 0, 0),
(26037, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 115, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'TU 10:00A-11:00A', '85', 'Evans', 'DIS', 0, 0),
(26040, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 16, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'TH 12:00P-2:00P', '330', 'Soda', 'LAB', 0, 0),
(26043, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 116, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'TU 1:00P-2:00P', '71', 'Evans', 'DIS', 0, 0),
(26046, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 17, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'TH 2:00P-4:00P', '330', 'Soda', 'LAB', 0, 0),
(26049, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 117, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'TU 2:00P-3:00P', '4', 'Evans', 'DIS', 0, 0),
(26052, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 18, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'TH 4:00P-6:00P', '330', 'Soda', 'LAB', 0, 0),
(26055, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 118, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'TU 5:00P-6:00P', '6', 'Evans', 'DIS', 0, 0),
(26058, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 19, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'TH 6:00P-8:00P', '330', 'Soda', 'LAB', 0, 0),
(26061, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 119, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'TU 6:00P-7:00P', '71', 'Evans', 'DIS', 0, 0),
(26064, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 20, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'TH 2:00P-4:00P', '277', 'Soda', 'LAB', 0, 0),
(26067, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 120, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'TU 7:00P-8:00P', '81', 'Evans', 'DIS', 0, 0),
(26070, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 21, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'F 9:00A-11:00A', '330', 'Soda', 'LAB', 0, 0),
(26073, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 121, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'W 10:00A-11:00A', '85', 'Evans', 'DIS', 0, 0),
(26076, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 22, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'F 11:00A-1:00P', '330', 'Soda', 'LAB', 0, 0),
(26079, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 122, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'W 11:00A-12:00P', '285', 'Cory', 'DIS', 0, 0),
(26082, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 23, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'F 1:00P-3:00P', '330', 'Soda', 'LAB', 0, 0),
(26085, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 123, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'W 1:00P-2:00P', '75', 'Evans', 'DIS', 0, 0),
(26088, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 24, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'W 5:00P-7:00P', '273', 'Soda', 'LAB', 0, 0),
(26091, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 124, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'M 5:00P-6:00P', '6', 'Evans', 'DIS', 0, 0),
(26094, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 25, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'TH 9:00A-11:00A', '273', 'Soda', 'LAB', 0, 0),
(26097, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 125, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'TU 10:00A-11:00A', '87', 'Evans', 'DIS', 0, 0),
(26100, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 26, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'TH 11:00A-1:00P', '273', 'Soda', 'LAB', 0, 0),
(26103, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 126, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'TU 11:00A-12:00P', '4', 'Evans', 'DIS', 0, 0),
(26106, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 27, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'TH 1:00P-3:00P', '273', 'Soda', 'LAB', 0, 0),
(26109, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 127, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'TU 2:00P-3:00P', '6', 'Evans', 'DIS', 0, 0),
(26112, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 28, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'TH 3:00P-5:00P', '273', 'Soda', 'LAB', 0, 0),
(26115, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 128, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'TU 3:00P-4:00P', '3105', 'Etcheverry', 'DIS', 0, 0),
(26118, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 29, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'TH 5:00P-7:00P', '273', 'Soda', 'LAB', 0, 0),
(26121, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 129, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'TU 5:00P-6:00P', '71', 'Evans', 'DIS', 0, 0),
(26124, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 30, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'TH 7:00P-9:00P', '273', 'Soda', 'LAB', 0, 0),
(26127, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 130, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'TU 6:00P-7:00P', '6', 'Evans', 'DIS', 0, 0),
(26128, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 31, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'W 4:00P-6:00P', '277', 'Soda', 'LAB', 0, 0),
(26129, 'CS 61C', 'Great Ideas of Computer Architecture (Formerly Machine Structure', 33, 'The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'F 11:00A-1:00P', '277', 'Soda', 'LAB', 0, 0),
(26130, 'CS 70', 'Discrete Math & Probability', 1, 'Logic, infinity, and induction; applications include undecidability and stable marriage problem. Modular arithmetic and GCDs; applications include primality testing and cryptography. Polynomials; examples include error correcting codes and interpolation. Probability including sample spaces, independence, random variables, law of large numbers; examples include load balancing, existence arguments, Bayesian inference.', 'TuTh 3:30P-5:00P', '150', 'Wheeler', 'LEC', 4, 20),
(26133, 'CS 70', 'Discrete Math & Probability', 101, 'Logic, infinity, and induction; applications include undecidability and stable marriage problem. Modular arithmetic and GCDs; applications include primality testing and cryptography. Polynomials; examples include error correcting codes and interpolation. Probability including sample spaces, independence, random variables, law of large numbers; examples include load balancing, existence arguments, Bayesian inference.', 'MW 10:00A-11:00A', '3105', 'Etcheverry', 'DIS', 0, 0),
(26136, 'CS 70', 'Discrete Math & Probability', 102, 'Logic, infinity, and induction; applications include undecidability and stable marriage problem. Modular arithmetic and GCDs; applications include primality testing and cryptography. Polynomials; examples include error correcting codes and interpolation. Probability including sample spaces, independence, random variables, law of large numbers; examples include load balancing, existence arguments, Bayesian inference.', 'MW 10:00A-11:00A', '105', 'Latimer', 'DIS', 0, 0),
(26139, 'CS 70', 'Discrete Math & Probability', 103, 'Logic, infinity, and induction; applications include undecidability and stable marriage problem. Modular arithmetic and GCDs; applications include primality testing and cryptography. Polynomials; examples include error correcting codes and interpolation. Probability including sample spaces, independence, random variables, law of large numbers; examples include load balancing, existence arguments, Bayesian inference.', 'MW 11:00A-12:00P', '3105', 'Etcheverry', 'DIS', 0, 0),
(26142, 'CS 70', 'Discrete Math & Probability', 104, 'Logic, infinity, and induction; applications include undecidability and stable marriage problem. Modular arithmetic and GCDs; applications include primality testing and cryptography. Polynomials; examples include error correcting codes and interpolation. Probability including sample spaces, independence, random variables, law of large numbers; examples include load balancing, existence arguments, Bayesian inference.', 'MW 11:00A-12:00P', '105', 'Latimer', 'DIS', 0, 0),
(26145, 'CS 70', 'Discrete Math & Probability', 105, 'Logic, infinity, and induction; applications include undecidability and stable marriage problem. Modular arithmetic and GCDs; applications include primality testing and cryptography. Polynomials; examples include error correcting codes and interpolation. Probability including sample spaces, independence, random variables, law of large numbers; examples include load balancing, existence arguments, Bayesian inference.', 'MW 2:00P-3:00P', '310', 'HMMB', 'DIS', 0, 0),
(26148, 'CS 70', 'Discrete Math & Probability', 106, 'Logic, infinity, and induction; applications include undecidability and stable marriage problem. Modular arithmetic and GCDs; applications include primality testing and cryptography. Polynomials; examples include error correcting codes and interpolation. Probability including sample spaces, independence, random variables, law of large numbers; examples include load balancing, existence arguments, Bayesian inference.', 'MW 3:00P-4:00P', '87', 'Evans', 'DIS', 0, 0),
(26151, 'CS 70', 'Discrete Math & Probability', 107, 'Logic, infinity, and induction; applications include undecidability and stable marriage problem. Modular arithmetic and GCDs; applications include primality testing and cryptography. Polynomials; examples include error correcting codes and interpolation. Probability including sample spaces, independence, random variables, law of large numbers; examples include load balancing, existence arguments, Bayesian inference.', 'MW 4:00P-5:00P', '75', 'Evans', 'DIS', 0, 0),
(26154, 'CS 70', 'Discrete Math & Probability', 108, 'Logic, infinity, and induction; applications include undecidability and stable marriage problem. Modular arithmetic and GCDs; applications include primality testing and cryptography. Polynomials; examples include error correcting codes and interpolation. Probability including sample spaces, independence, random variables, law of large numbers; examples include load balancing, existence arguments, Bayesian inference.', 'MW 5:00P-6:00P', '75', 'Evans', 'DIS', 0, 0),
(26157, 'CS 70', 'Discrete Math & Probability', 109, 'Logic, infinity, and induction; applications include undecidability and stable marriage problem. Modular arithmetic and GCDs; applications include primality testing and cryptography. Polynomials; examples include error correcting codes and interpolation. Probability including sample spaces, independence, random variables, law of large numbers; examples include load balancing, existence arguments, Bayesian inference.', 'MW 5:00P-6:00P', '87', 'Evans', 'DIS', 0, 0),
(26160, 'CS 70', 'Discrete Math & Probability', 110, 'Logic, infinity, and induction; applications include undecidability and stable marriage problem. Modular arithmetic and GCDs; applications include primality testing and cryptography. Polynomials; examples include error correcting codes and interpolation. Probability including sample spaces, independence, random variables, law of large numbers; examples include load balancing, existence arguments, Bayesian inference.', 'MW 6:00P-7:00P', '87', 'Evans', 'DIS', 0, 0),
(26163, 'CS 70', 'Discrete Math & Probability', 111, 'Logic, infinity, and induction; applications include undecidability and stable marriage problem. Modular arithmetic and GCDs; applications include primality testing and cryptography. Polynomials; examples include error correcting codes and interpolation. Probability including sample spaces, independence, random variables, law of large numbers; examples include load balancing, existence arguments, Bayesian inference.', 'MW 6:00P-7:00P', '85', 'Evans', 'DIS', 0, 0),
(26166, 'CS 70', 'Discrete Math & Probability', 112, 'Logic, infinity, and induction; applications include undecidability and stable marriage problem. Modular arithmetic and GCDs; applications include primality testing and cryptography. Polynomials; examples include error correcting codes and interpolation. Probability including sample spaces, independence, random variables, law of large numbers; examples include load balancing, existence arguments, Bayesian inference.', 'MW 2:00P-3:00P', '243', 'Dwinelle', 'DIS', 0, 0),
(26169, 'CS 70', 'Discrete Math & Probability', 113, 'Logic, infinity, and induction; applications include undecidability and stable marriage problem. Modular arithmetic and GCDs; applications include primality testing and cryptography. Polynomials; examples include error correcting codes and interpolation. Probability including sample spaces, independence, random variables, law of large numbers; examples include load balancing, existence arguments, Bayesian inference.', 'MW 3:00P-4:00P', '3113', 'Etcheverry', 'DIS', 0, 0),
(26172, 'CS 70', 'Discrete Math & Probability', 114, 'Logic, infinity, and induction; applications include undecidability and stable marriage problem. Modular arithmetic and GCDs; applications include primality testing and cryptography. Polynomials; examples include error correcting codes and interpolation. Probability including sample spaces, independence, random variables, law of large numbers; examples include load balancing, existence arguments, Bayesian inference.', 'MW 12:00P-1:00P', '85', 'Evans', 'DIS', 0, 0),
(26175, 'CS 70', 'Discrete Math & Probability', 115, 'Logic, infinity, and induction; applications include undecidability and stable marriage problem. Modular arithmetic and GCDs; applications include primality testing and cryptography. Polynomials; examples include error correcting codes and interpolation. Probability including sample spaces, independence, random variables, law of large numbers; examples include load balancing, existence arguments, Bayesian inference.', 'MW 1:00P-2:00P', '140', 'Barrows', 'DIS', 0, 0),
(26178, 'CS 70', 'Discrete Math & Probability', 116, 'Logic, infinity, and induction; applications include undecidability and stable marriage problem. Modular arithmetic and GCDs; applications include primality testing and cryptography. Polynomials; examples include error correcting codes and interpolation. Probability including sample spaces, independence, random variables, law of large numbers; examples include load balancing, existence arguments, Bayesian inference.', 'MW 5:00P-6:00P', 'B56', 'Hildebrand', 'DIS', 0, 0),
(26187, 'CS 70', 'Discrete Math & Probability', 119, 'Logic, infinity, and induction; applications include undecidability and stable marriage problem. Modular arithmetic and GCDs; applications include primality testing and cryptography. Polynomials; examples include error correcting codes and interpolation. Probability including sample spaces, independence, random variables, law of large numbers; examples include load balancing, existence arguments, Bayesian inference.', 'MW 2:00P-3:00P', '102', 'Latimer', 'DIS', 0, 0),
(26190, 'CS 70', 'Discrete Math & Probability', 120, 'Logic, infinity, and induction; applications include undecidability and stable marriage problem. Modular arithmetic and GCDs; applications include primality testing and cryptography. Polynomials; examples include error correcting codes and interpolation. Probability including sample spaces, independence, random variables, law of large numbers; examples include load balancing, existence arguments, Bayesian inference.', 'MW 6:00P-7:00P', '71', 'Evans', 'DIS', 0, 0),
(26217, 'CS 98', 'Macintosh Student Developers for OS X', 1, 'Seminars for group study of selected topics, which will vary from year to year. Intended for students in the lower division.', 'MW 8:00P-10:00P', '200', 'Sutardja Dai', 'GRP', 2, 0),
(26220, 'CS 98', 'GamesCrafters', 2, 'Seminars for group study of selected topics, which will vary from year to year. Intended for students in the lower division.', 'MWF 11:00A-12:00P', '606', 'Soda', 'GRP', 2, 0),
(26223, 'CS 98', 'UC Berkeley Undergraduate Graphics Group (UCBUGG)', 3, 'Seminars for group study of selected topics, which will vary from year to year. Intended for students in the lower division.', 'TuTh 7:00P-9:00P', '200', 'Sutardja Dai', 'GRP', 3, 0),
(26259, 'CS 149', 'Introduction to Embedded Systems', 1, 'This course introduces students to the basics of models, analysis tools, and control for embedded systems operating in real time. Students learn how to combine physical processes with computation. Topics include models of computation, control, analysis and verification, interfacing with the physical world, mapping to platforms, and distributed embedded systems. The course has a strong laboratory component, with emphasis on a semester-long sequence of projects. Also listed as Electrical Engineering C149.', 'TuTh 11:00A-12:30P', '105', 'North Gate', 'LEC', 4, 9),
(26262, 'CS 150', 'Components and Design Techniques for Digital Systems', 1, 'Basic building blocks and design methods to contruct synchronous digital systems, such as general purpose processors, hardware accelerators, and application specific processors. Representations and design methodologies for digital systems. Logic design using combinatorial and sequential circuits. Digital system implementation considering hardware descriptions languages, computer-aided design tools, field-programmable gate array architectures, and CMOS logic gates and state elements. Interfaces between perip', 'TuTh 11:00A-12:30P,F 2-3P', '306', 'Soda', 'LEC', 5, 5),
(26265, 'CS 150', 'Components and Design Techniques for Digital Systems', 101, 'Basic building blocks and design methods to contruct synchronous digital systems, such as general purpose processors, hardware accelerators, and application specific processors. Representations and design methodologies for digital systems. Logic design using combinatorial and sequential circuits. Digital system implementation considering hardware descriptions languages, computer-aided design tools, field-programmable gate array architectures, and CMOS logic gates and state elements. Interfaces between perip', 'W 2:00P-3:00P', '4', 'Evans', 'DIS', 0, 0),
(26268, 'CS 150', 'Components and Design Techniques for Digital Systems', 102, 'Basic building blocks and design methods to contruct synchronous digital systems, such as general purpose processors, hardware accelerators, and application specific processors. Representations and design methodologies for digital systems. Logic design using combinatorial and sequential circuits. Digital system implementation considering hardware descriptions languages, computer-aided design tools, field-programmable gate array architectures, and CMOS logic gates and state elements. Interfaces between perip', 'W 3:00P-4:00P', '71', 'Evans', 'DIS', 0, 0),
(26271, 'CS 150', 'Components and Design Techniques for Digital Systems', 11, 'Basic building blocks and design methods to contruct synchronous digital systems, such as general purpose processors, hardware accelerators, and application specific processors. Representations and design methodologies for digital systems. Logic design using combinatorial and sequential circuits. Digital system implementation considering hardware descriptions languages, computer-aided design tools, field-programmable gate array architectures, and CMOS logic gates and state elements. Interfaces between perip', 'TU 5:30P-8:30P', '125', 'Cory', 'LAB', 0, 0),
(26274, 'CS 150', 'Components and Design Techniques for Digital Systems', 12, 'Basic building blocks and design methods to contruct synchronous digital systems, such as general purpose processors, hardware accelerators, and application specific processors. Representations and design methodologies for digital systems. Logic design using combinatorial and sequential circuits. Digital system implementation considering hardware descriptions languages, computer-aided design tools, field-programmable gate array architectures, and CMOS logic gates and state elements. Interfaces between perip', 'TH 5:30P-8:30P', '125', 'Cory', 'LAB', 0, 0),
(26277, 'CS 150', 'Components and Design Techniques for Digital Systems', 13, 'Basic building blocks and design methods to contruct synchronous digital systems, such as general purpose processors, hardware accelerators, and application specific processors. Representations and design methodologies for digital systems. Logic design using combinatorial and sequential circuits. Digital system implementation considering hardware descriptions languages, computer-aided design tools, field-programmable gate array architectures, and CMOS logic gates and state elements. Interfaces between perip', 'W 5:30P-8:30P', '125', 'Cory', 'LAB', 0, 0),
(26280, 'CS 160', 'User Interfaces', 1, 'The design, implementation, and evaluation of user interfaces. User-centered design and task analysis. Conceptual models and interface metaphors. Usability inspection and evaluation methods. Analysis of user study data. Input methods (keyboard, pointing, touch, tangible) and input models. Visual design principles. Interface prototyping and implementation methodologies and tools. Students will develop a user interface for a specific task and target user group in teams.', 'TuTh 3:30-5:00P', '306', 'Soda', 'LEC', 4, 20),
(26283, 'CS 160', 'User Interfaces', 101, 'The design, implementation, and evaluation of user interfaces. User-centered design and task analysis. Conceptual models and interface metaphors. Usability inspection and evaluation methods. Analysis of user study data. Input methods (keyboard, pointing, touch, tangible) and input models. Visual design principles. Interface prototyping and implementation methodologies and tools. Students will develop a user interface for a specific task and target user group in teams.', 'F 2:00P-3:00P', '405', 'Soda', 'DIS', 0, 0),
(26286, 'CS 160', 'User Interfaces', 102, 'The design, implementation, and evaluation of user interfaces. User-centered design and task analysis. Conceptual models and interface metaphors. Usability inspection and evaluation methods. Analysis of user study data. Input methods (keyboard, pointing, touch, tangible) and input models. Visual design principles. Interface prototyping and implementation methodologies and tools. Students will develop a user interface for a specific task and target user group in teams.', 'F 3:00P-4:00P', '405', 'Soda', 'DIS', 0, 0),
(26289, 'CS 160', 'User Interfaces', 103, 'The design, implementation, and evaluation of user interfaces. User-centered design and task analysis. Conceptual models and interface metaphors. Usability inspection and evaluation methods. Analysis of user study data. Input methods (keyboard, pointing, touch, tangible) and input models. Visual design principles. Interface prototyping and implementation methodologies and tools. Students will develop a user interface for a specific task and target user group in teams.', 'F 4:00P-5:00P', '405', 'Soda', 'DIS', 0, 0),
(26292, 'CS 160', 'User Interfaces', 104, 'The design, implementation, and evaluation of user interfaces. User-centered design and task analysis. Conceptual models and interface metaphors. Usability inspection and evaluation methods. Analysis of user study data. Input methods (keyboard, pointing, touch, tangible) and input models. Visual design principles. Interface prototyping and implementation methodologies and tools. Students will develop a user interface for a specific task and target user group in teams.', 'F 5:00P-6:00P', '405', 'Soda', 'DIS', 0, 0),
(26295, 'CS 161', 'Computer Security', 1, 'Introduction to computer security. Cryptography, including encryption, authentication, hash functions, cryptographic protocols, and applications. Operating system security, access control. Network security, firewalls, viruses, and worms. Software security, defensive programming, and language-based security. Case studies from real-world systems.', 'TuTh 3:30P-5:00P', '10', 'Evans', 'LEC', 4, 20),
(26298, 'CS 161', 'Computer Security', 101, 'Introduction to computer security. Cryptography, including encryption, authentication, hash functions, cryptographic protocols, and applications. Operating system security, access control. Network security, firewalls, viruses, and worms. Software security, defensive programming, and language-based security. Case studies from real-world systems.', 'W 10:00A-11:00A', '6', 'Evans', 'DIS', 0, 0),
(26301, 'CS 161', 'Computer Security', 102, 'Introduction to computer security. Cryptography, including encryption, authentication, hash functions, cryptographic protocols, and applications. Operating system security, access control. Network security, firewalls, viruses, and worms. Software security, defensive programming, and language-based security. Case studies from real-world systems.', 'W 11:00A-12:00P', '9', 'Evans', 'DIS', 0, 0),
(26304, 'CS 161', 'Computer Security', 103, 'Introduction to computer security. Cryptography, including encryption, authentication, hash functions, cryptographic protocols, and applications. Operating system security, access control. Network security, firewalls, viruses, and worms. Software security, defensive programming, and language-based security. Case studies from real-world systems.', 'W 1:00P-2:00P', '71', 'Evans', 'DIS', 0, 0),
(26307, 'CS 161', 'Computer Security', 104, 'Introduction to computer security. Cryptography, including encryption, authentication, hash functions, cryptographic protocols, and applications. Operating system security, access control. Network security, firewalls, viruses, and worms. Software security, defensive programming, and language-based security. Case studies from real-world systems.', 'W 2:00P-3:00P', '6', 'Evans', 'DIS', 0, 0),
(26310, 'CS 161', 'Computer Security', 105, 'Introduction to computer security. Cryptography, including encryption, authentication, hash functions, cryptographic protocols, and applications. Operating system security, access control. Network security, firewalls, viruses, and worms. Software security, defensive programming, and language-based security. Case studies from real-world systems.', 'W 3:00P-4:00P', '130', 'Wheeler', 'DIS', 0, 0),
(26313, 'CS 161', 'Computer Security', 106, 'Introduction to computer security. Cryptography, including encryption, authentication, hash functions, cryptographic protocols, and applications. Operating system security, access control. Network security, firewalls, viruses, and worms. Software security, defensive programming, and language-based security. Case studies from real-world systems.', 'W 4:00P-5:00P', '4', 'Evans', 'DIS', 0, 0),
(26316, 'CS 162', 'Operating Systems and System Programming', 1, 'Basic concepts of operating systems and system programming. Utility programs, subsystems, multiple-program systems. Processes, interprocess communication, and synchronization. Memory allocation, segmentation, paging. Loading and linking, libraries. Resource allocation, scheduling, performance evaluation. File systems, storage devices, I/O systems. Protection, security, and privacy.', 'MWF 10:00A-11:00A', '10', 'Evans', 'LEC', 4, 1),
(26319, 'CS 162', 'Operating Systems and System Programming', 101, 'Basic concepts of operating systems and system programming. Utility programs, subsystems, multiple-program systems. Processes, interprocess communication, and synchronization. Memory allocation, segmentation, paging. Loading and linking, libraries. Resource allocation, scheduling, performance evaluation. File systems, storage devices, I/O systems. Protection, security, and privacy.', 'W 3:00P-4:00P', '285', 'Cory', 'DIS', 0, 0),
(26322, 'CS 162', 'Operating Systems and System Programming', 102, 'Basic concepts of operating systems and system programming. Utility programs, subsystems, multiple-program systems. Processes, interprocess communication, and synchronization. Memory allocation, segmentation, paging. Loading and linking, libraries. Resource allocation, scheduling, performance evaluation. File systems, storage devices, I/O systems. Protection, security, and privacy.', 'W 4:00P-5:00P', '6', 'Evans', 'DIS', 0, 0),
(26325, 'CS 162', 'Operating Systems and System Programming', 103, 'Basic concepts of operating systems and system programming. Utility programs, subsystems, multiple-program systems. Processes, interprocess communication, and synchronization. Memory allocation, segmentation, paging. Loading and linking, libraries. Resource allocation, scheduling, performance evaluation. File systems, storage devices, I/O systems. Protection, security, and privacy.', 'TH 10:00A-11:00A', '87', 'Evans', 'DIS', 0, 0),
(26328, 'CS 162', 'Operating Systems and System Programming', 104, 'Basic concepts of operating systems and system programming. Utility programs, subsystems, multiple-program systems. Processes, interprocess communication, and synchronization. Memory allocation, segmentation, paging. Loading and linking, libraries. Resource allocation, scheduling, performance evaluation. File systems, storage devices, I/O systems. Protection, security, and privacy.', 'TH 11:00A-12:00P', '85', 'Evans', 'DIS', 0, 0),
(26331, 'CS 162', 'Operating Systems and System Programming', 105, 'Basic concepts of operating systems and system programming. Utility programs, subsystems, multiple-program systems. Processes, interprocess communication, and synchronization. Memory allocation, segmentation, paging. Loading and linking, libraries. Resource allocation, scheduling, performance evaluation. File systems, storage devices, I/O systems. Protection, security, and privacy.', 'TH 12:00P-1:00P', '71', 'Evans', 'DIS', 0, 0),
(26334, 'CS 162', 'Operating Systems and System Programming', 106, 'Basic concepts of operating systems and system programming. Utility programs, subsystems, multiple-program systems. Processes, interprocess communication, and synchronization. Memory allocation, segmentation, paging. Loading and linking, libraries. Resource allocation, scheduling, performance evaluation. File systems, storage devices, I/O systems. Protection, security, and privacy.', 'TH 1:00P-2:00P', '285', 'Cory', 'DIS', 0, 0),
(26336, 'CS 162', 'Operating Systems and System Programming', 107, 'Basic concepts of operating systems and system programming. Utility programs, subsystems, multiple-program systems. Processes, interprocess communication, and synchronization. Memory allocation, segmentation, paging. Loading and linking, libraries. Resource allocation, scheduling, performance evaluation. File systems, storage devices, I/O systems. Protection, security, and privacy.', 'W 3:00-4:00P', '7', 'Evans', 'DIS', 0, 0),
(26337, 'CS 164', 'Programming Languages and Compilers', 1, 'Survey of programming languages. The design of modern programming languages. Principles and techniques of scanning, parsing, semantic analysis, and code generation. Implementation of compilers, interpreters, and assemblers. Overview of run-time organization and error handling.', 'TuTh 9:30A-11:00A', '306', 'Soda', 'LEC', 4, 7),
(26340, 'CS 164', 'Programming Languages and Compilers', 101, 'Survey of programming languages. The design of modern programming languages. Principles and techniques of scanning, parsing, semantic analysis, and code generation. Implementation of compilers, interpreters, and assemblers. Overview of run-time organization and error handling.', 'W 10:00A-11:00A', '71', 'Evans', 'DIS', 0, 0),
(26343, 'CS 164', 'Programming Languages and Compilers', 102, 'Survey of programming languages. The design of modern programming languages. Principles and techniques of scanning, parsing, semantic analysis, and code generation. Implementation of compilers, interpreters, and assemblers. Overview of run-time organization and error handling.', 'W 11:00A-12:00P', '71', 'Evans', 'DIS', 0, 0),
(26346, 'CS 164', 'Programming Languages and Compilers', 103, 'Survey of programming languages. The design of modern programming languages. Principles and techniques of scanning, parsing, semantic analysis, and code generation. Implementation of compilers, interpreters, and assemblers. Overview of run-time organization and error handling.', 'W 1:00-2:00P', '209', 'Dwinelle', 'DIS', 0, 0),
(26348, 'CS 164', 'Programming Languages and Compilers', 104, 'Survey of programming languages. The design of modern programming languages. Principles and techniques of scanning, parsing, semantic analysis, and code generation. Implementation of compilers, interpreters, and assemblers. Overview of run-time organization and error handling.', 'W 3:00-4:00P', '75', 'Evans', 'DIS', 0, 0),
(26349, 'CS 169', 'Software Engineering', 1, 'Ideas and techniques for designing, developing, and modifying large software systems. Function-oriented and object-oriented modular design techniques, designing for re-use and maintainability. Specification and documentation. Verification and validation. Cost and quality metrics and estimation. Project team organization and management. Students will work in teams on a substantial programming project.', 'MW 5:30P-7:00P', '306', 'Soda', 'LEC', 4, 19);
INSERT INTO `Courses` (`CCN`, `Course_Code`, `Course_Title`, `Section_No`, `Description`, `Time`, `Room_No`, `Building_Name`, `Course_Type`, `Units`, `Exam`) VALUES
(26352, 'CS 169', 'Software Engineering', 101, 'Ideas and techniques for designing, developing, and modifying large software systems. Function-oriented and object-oriented modular design techniques, designing for re-use and maintainability. Specification and documentation. Verification and validation. Cost and quality metrics and estimation. Project team organization and management. Students will work in teams on a substantial programming project.', 'TH 10:00A-11:00A', '9', 'Evans', 'DIS', 0, 0),
(26355, 'CS 169', 'Software Engineering', 102, 'Ideas and techniques for designing, developing, and modifying large software systems. Function-oriented and object-oriented modular design techniques, designing for re-use and maintainability. Specification and documentation. Verification and validation. Cost and quality metrics and estimation. Project team organization and management. Students will work in teams on a substantial programming project.', 'TH 11:00A-12:00P', '6', 'Evans', 'DIS', 0, 0),
(26358, 'CS 169', 'Software Engineering', 103, 'Ideas and techniques for designing, developing, and modifying large software systems. Function-oriented and object-oriented modular design techniques, designing for re-use and maintainability. Specification and documentation. Verification and validation. Cost and quality metrics and estimation. Project team organization and management. Students will work in teams on a substantial programming project.', 'TH 1:00-2:00P', '241', 'Cory', 'DIS', 0, 0),
(26361, 'CS 169', 'Software Engineering', 104, 'Ideas and techniques for designing, developing, and modifying large software systems. Function-oriented and object-oriented modular design techniques, designing for re-use and maintainability. Specification and documentation. Verification and validation. Cost and quality metrics and estimation. Project team organization and management. Students will work in teams on a substantial programming project.', 'TH 4:00P-5:00P', '100', 'Wheeler', 'DIS', 0, 0),
(26364, 'CS 170', 'Introduction to CS Theory', 1, 'Concept and basic techniques in the design and analysis of algorithms; models of computation; lower bounds; algorithms for optimum search trees, balanced trees and UNION-FIND algorithms; numerical and algebraic algorithms; combinatorial algorithms. Turing machines, how to count steps, deterministic and nondeterministic Turing machines, NP-completeness. Unsolvable and intractable problems.', 'MWF 11:00A-12:00P', '155', 'Dwinelle', 'LEC', 4, 2),
(26367, 'CS 170', 'Introduction to CS Theory', 101, 'Concept and basic techniques in the design and analysis of algorithms; models of computation; lower bounds; algorithms for optimum search trees, balanced trees and UNION-FIND algorithms; numerical and algebraic algorithms; combinatorial algorithms. Turing machines, how to count steps, deterministic and nondeterministic Turing machines, NP-completeness. Unsolvable and intractable problems.', 'W 2:00P-3:00P', '71', 'Evans', 'DIS', 0, 0),
(26370, 'CS 170', 'Introduction to CS Theory', 102, 'Concept and basic techniques in the design and analysis of algorithms; models of computation; lower bounds; algorithms for optimum search trees, balanced trees and UNION-FIND algorithms; numerical and algebraic algorithms; combinatorial algorithms. Turing machines, how to count steps, deterministic and nondeterministic Turing machines, NP-completeness. Unsolvable and intractable problems.', 'W 3:00P-4:00P', '289', 'Cory', 'DIS', 0, 0),
(26373, 'CS 170', 'Introduction to CS Theory', 103, 'Concept and basic techniques in the design and analysis of algorithms; models of computation; lower bounds; algorithms for optimum search trees, balanced trees and UNION-FIND algorithms; numerical and algebraic algorithms; combinatorial algorithms. Turing machines, how to count steps, deterministic and nondeterministic Turing machines, NP-completeness. Unsolvable and intractable problems.', 'W 4:00P-5:00P', '71', 'Evans', 'DIS', 0, 0),
(26376, 'CS 170', 'Introduction to CS Theory', 104, 'Concept and basic techniques in the design and analysis of algorithms; models of computation; lower bounds; algorithms for optimum search trees, balanced trees and UNION-FIND algorithms; numerical and algebraic algorithms; combinatorial algorithms. Turing machines, how to count steps, deterministic and nondeterministic Turing machines, NP-completeness. Unsolvable and intractable problems.', 'W 5:00P-6:00P', '2', 'Evans', 'DIS', 0, 0),
(26379, 'CS 170', 'Introduction to CS Theory', 105, 'Concept and basic techniques in the design and analysis of algorithms; models of computation; lower bounds; algorithms for optimum search trees, balanced trees and UNION-FIND algorithms; numerical and algebraic algorithms; combinatorial algorithms. Turing machines, how to count steps, deterministic and nondeterministic Turing machines, NP-completeness. Unsolvable and intractable problems.', 'TH 9:00A-10:00A', '87', 'Evans', 'DIS', 0, 0),
(26382, 'CS 170', 'Introduction to CS Theory', 106, 'Concept and basic techniques in the design and analysis of algorithms; models of computation; lower bounds; algorithms for optimum search trees, balanced trees and UNION-FIND algorithms; numerical and algebraic algorithms; combinatorial algorithms. Turing machines, how to count steps, deterministic and nondeterministic Turing machines, NP-completeness. Unsolvable and intractable problems.', 'TH 10:00A-11:00A', '285', 'Cory', 'DIS', 0, 0),
(26385, 'CS 170', 'Introduction to CS Theory', 107, 'Concept and basic techniques in the design and analysis of algorithms; models of computation; lower bounds; algorithms for optimum search trees, balanced trees and UNION-FIND algorithms; numerical and algebraic algorithms; combinatorial algorithms. Turing machines, how to count steps, deterministic and nondeterministic Turing machines, NP-completeness. Unsolvable and intractable problems.', 'TH 11:00A-12:00P', '105', 'Latimer', 'DIS', 0, 0),
(26388, 'CS 170', 'Introduction to CS Theory', 108, 'Concept and basic techniques in the design and analysis of algorithms; models of computation; lower bounds; algorithms for optimum search trees, balanced trees and UNION-FIND algorithms; numerical and algebraic algorithms; combinatorial algorithms. Turing machines, how to count steps, deterministic and nondeterministic Turing machines, NP-completeness. Unsolvable and intractable problems.', 'TH 2:00P-3:00P', '87', 'Evans', 'DIS', 0, 0),
(26391, 'CS 170', 'Introduction to CS Theory', 109, 'Concept and basic techniques in the design and analysis of algorithms; models of computation; lower bounds; algorithms for optimum search trees, balanced trees and UNION-FIND algorithms; numerical and algebraic algorithms; combinatorial algorithms. Turing machines, how to count steps, deterministic and nondeterministic Turing machines, NP-completeness. Unsolvable and intractable problems.', 'TH 3:00P-4:00P', '254', 'Sutardja Dai', 'DIS', 0, 0),
(26394, 'CS 170', 'Introduction to CS Theory', 110, 'Concept and basic techniques in the design and analysis of algorithms; models of computation; lower bounds; algorithms for optimum search trees, balanced trees and UNION-FIND algorithms; numerical and algebraic algorithms; combinatorial algorithms. Turing machines, how to count steps, deterministic and nondeterministic Turing machines, NP-completeness. Unsolvable and intractable problems.', 'TH 4:00P-5:00P', '254', 'Sutardja Dai', 'DIS', 0, 0),
(26397, 'CS 170', 'Introduction to CS Theory', 111, 'Concept and basic techniques in the design and analysis of algorithms; models of computation; lower bounds; algorithms for optimum search trees, balanced trees and UNION-FIND algorithms; numerical and algebraic algorithms; combinatorial algorithms. Turing machines, how to count steps, deterministic and nondeterministic Turing machines, NP-completeness. Unsolvable and intractable problems.', 'TH 5:00P-6:00P', '85', 'Evans', 'DIS', 0, 0),
(26400, 'CS 170', 'Introduction to CS Theory', 112, 'Concept and basic techniques in the design and analysis of algorithms; models of computation; lower bounds; algorithms for optimum search trees, balanced trees and UNION-FIND algorithms; numerical and algebraic algorithms; combinatorial algorithms. Turing machines, how to count steps, deterministic and nondeterministic Turing machines, NP-completeness. Unsolvable and intractable problems.', 'TH 6:00P-7:00P', '85', 'Evans', 'DIS', 0, 0),
(26403, 'CS 170', 'Introduction to CS Theory', 113, 'Concept and basic techniques in the design and analysis of algorithms; models of computation; lower bounds; algorithms for optimum search trees, balanced trees and UNION-FIND algorithms; numerical and algebraic algorithms; combinatorial algorithms. Turing machines, how to count steps, deterministic and nondeterministic Turing machines, NP-completeness. Unsolvable and intractable problems.', 'F 10:00A-11:00A', '85', 'Evans', 'DIS', 0, 0),
(26405, 'CS 170', 'Introduction to CS Theory', 114, 'Concept and basic techniques in the design and analysis of algorithms; models of computation; lower bounds; algorithms for optimum search trees, balanced trees and UNION-FIND algorithms; numerical and algebraic algorithms; combinatorial algorithms. Turing machines, how to count steps, deterministic and nondeterministic Turing machines, NP-completeness. Unsolvable and intractable problems.', 'W 3:00P-4:00P', '4', 'Evans', 'DIS', 0, 0),
(26411, 'CS 176', 'Algorithms for Computational Biology', 1, 'Algorithms and probabilistic models that arise in various computational biology applications: suffix trees, suffix arrays, pattern matching, repeat finding, sequence alignment, phylogenetics, genome rearrangements, hidden Markov models, gene finding, motif finding, stochastic context free grammars, RNA secondary structure. There are no biology prerequisites for this course, but a strong quantitative background will be essential.', 'TT 2:00-3:30P', '306', 'Soda', 'LEC', 4, 5),
(26412, 'CS 184', 'Foundations of Computer Graphics', 1, 'Techniques of modeling objects for the purpose of computer rendering: boundary representations, constructive solids geometry, hierarchical scene descriptions. Mathematical techniques for curve and surface representation. Basic elements of a computer graphics rendering pipeline; architecture of modern graphics display devices. Geometrical transformations such as rotation, scaling, translation, and their matrix representations. Homogeneous coordinates, projective and perspective transformations. Algorithms fo', 'MW 2:30P-4:00P', '306', 'Soda', 'LEC', 4, 15),
(26415, 'CS 184', 'Foundations of Computer Graphics', 101, 'Techniques of modeling objects for the purpose of computer rendering: boundary representations, constructive solids geometry, hierarchical scene descriptions. Mathematical techniques for curve and surface representation. Basic elements of a computer graphics rendering pipeline; architecture of modern graphics display devices. Geometrical transformations such as rotation, scaling, translation, and their matrix representations. Homogeneous coordinates, projective and perspective transformations. Algorithms fo', 'TU 11:00A-12:00P', '405', 'Soda', 'DIS', 0, 0),
(26418, 'CS 184', 'Foundations of Computer Graphics', 102, 'Techniques of modeling objects for the purpose of computer rendering: boundary representations, constructive solids geometry, hierarchical scene descriptions. Mathematical techniques for curve and surface representation. Basic elements of a computer graphics rendering pipeline; architecture of modern graphics display devices. Geometrical transformations such as rotation, scaling, translation, and their matrix representations. Homogeneous coordinates, projective and perspective transformations. Algorithms fo', 'TU 12:00P-1:00P', '405', 'Soda', 'DIS', 0, 0),
(26421, 'CS 184', 'Foundations of Computer Graphics', 103, 'Techniques of modeling objects for the purpose of computer rendering: boundary representations, constructive solids geometry, hierarchical scene descriptions. Mathematical techniques for curve and surface representation. Basic elements of a computer graphics rendering pipeline; architecture of modern graphics display devices. Geometrical transformations such as rotation, scaling, translation, and their matrix representations. Homogeneous coordinates, projective and perspective transformations. Algorithms fo', 'TU 1:00P-2:00P', '405', 'Soda', 'DIS', 0, 0),
(26424, 'CS 184', 'Foundations of Computer Graphics', 104, 'Techniques of modeling objects for the purpose of computer rendering: boundary representations, constructive solids geometry, hierarchical scene descriptions. Mathematical techniques for curve and surface representation. Basic elements of a computer graphics rendering pipeline; architecture of modern graphics display devices. Geometrical transformations such as rotation, scaling, translation, and their matrix representations. Homogeneous coordinates, projective and perspective transformations. Algorithms fo', 'TU 4:00P-5:00P', '405', 'Soda', 'DIS', 0, 0),
(26454, 'CS 188', 'Introduction to Artificial Intelligence', 1, 'Ideas and techniques underlying the design of intelligent computer systems. Topics include search, game playing, knowledge representation, inference, planning, reasoning under uncertainty, machine learning, robotics, perception, and language understanding.', 'TuTh 12:30P-2:00P', '2050', 'VLSB', 'LEC', 4, 17),
(26457, 'CS 188', 'Introduction to Artificial Intelligence', 101, 'Ideas and techniques underlying the design of intelligent computer systems. Topics include search, game playing, knowledge representation, inference, planning, reasoning under uncertainty, machine learning, robotics, perception, and language understanding.', 'M 9:00A-10:00A', '6', 'Evans', 'DIS', 0, 0),
(26460, 'CS 188', 'Introduction to Artificial Intelligence', 102, 'Ideas and techniques underlying the design of intelligent computer systems. Topics include search, game playing, knowledge representation, inference, planning, reasoning under uncertainty, machine learning, robotics, perception, and language understanding.', 'M 10:00A-11:00A', '6', 'Evans', 'DIS', 0, 0),
(26463, 'CS 188', 'Introduction to Artificial Intelligence', 103, 'Ideas and techniques underlying the design of intelligent computer systems. Topics include search, game playing, knowledge representation, inference, planning, reasoning under uncertainty, machine learning, robotics, perception, and language understanding.', 'M 11:00A-12:00P', '75', 'Evans', 'DIS', 0, 0),
(26466, 'CS 188', 'Introduction to Artificial Intelligence', 104, 'Ideas and techniques underlying the design of intelligent computer systems. Topics include search, game playing, knowledge representation, inference, planning, reasoning under uncertainty, machine learning, robotics, perception, and language understanding.', 'M 12:00P-1:00P', '2', 'Evans', 'DIS', 0, 0),
(26469, 'CS 188', 'Introduction to Artificial Intelligence', 105, 'Ideas and techniques underlying the design of intelligent computer systems. Topics include search, game playing, knowledge representation, inference, planning, reasoning under uncertainty, machine learning, robotics, perception, and language understanding.', 'M 1:00P-2:00P', '75', 'Evans', 'DIS', 0, 0),
(26472, 'CS 188', 'Introduction to Artificial Intelligence', 106, 'Ideas and techniques underlying the design of intelligent computer systems. Topics include search, game playing, knowledge representation, inference, planning, reasoning under uncertainty, machine learning, robotics, perception, and language understanding.', 'M 2:00P-3:00P', '4', 'Evans', 'DIS', 0, 0),
(26475, 'CS 188', 'Introduction to Artificial Intelligence', 107, 'Ideas and techniques underlying the design of intelligent computer systems. Topics include search, game playing, knowledge representation, inference, planning, reasoning under uncertainty, machine learning, robotics, perception, and language understanding.', 'M 3:00P-4:00P', '6', 'Evans', 'DIS', 0, 0),
(26478, 'CS 188', 'Introduction to Artificial Intelligence', 108, 'Ideas and techniques underlying the design of intelligent computer systems. Topics include search, game playing, knowledge representation, inference, planning, reasoning under uncertainty, machine learning, robotics, perception, and language understanding.', 'M 4:00P-5:00P', '6', 'Evans', 'DIS', 0, 0),
(26481, 'CS 188', 'Introduction to Artificial Intelligence', 109, 'Ideas and techniques underlying the design of intelligent computer systems. Topics include search, game playing, knowledge representation, inference, planning, reasoning under uncertainty, machine learning, robotics, perception, and language understanding.', 'M 5:00P-6:00P', '81', 'Evans', 'DIS', 0, 0),
(26484, 'CS 188', 'Introduction to Artificial Intelligence', 110, 'Ideas and techniques underlying the design of intelligent computer systems. Topics include search, game playing, knowledge representation, inference, planning, reasoning under uncertainty, machine learning, robotics, perception, and language understanding.', 'M 6:00P-7:00P', '81', 'Evans', 'DIS', 0, 0),
(26485, 'CS 188', 'Introduction to Artificial Intelligence', 111, 'Ideas and techniques underlying the design of intelligent computer systems. Topics include search, game playing, knowledge representation, inference, planning, reasoning under uncertainty, machine learning, robotics, perception, and language understanding.', 'M 4:00P-5:00P', '71', 'Evans', 'DIS', 0, 0),
(26486, 'CS C191', 'Quantum Information Science and Technology', 1, 'This multidisciplinary course provides an introduction to fundamental conceptual aspects of quantum mechanics from a computational and informational theoretic perspective, as well as physical implementations and technological applications of quantum information science. Basic sections of quantum algorithms, complexity, and cryptography, will be touched upon, as well as pertinent physical realizations from nanoscale science and engineering. Also listed as Physics C191 and Chemistry C191.', 'WF 9:00A-10:30A', '306', 'Soda', 'LEC', 3, 16),
(26487, 'CS 194', 'Advanced Digital Animation', 8, 'Topics will vary semester to semester. See the Computer Science Division announcements.', 'MWF 1:00P-3:00P', '606', 'Soda', 'LEC', 4, 12),
(26490, 'CS 194', 'Engineering Parallel Software', 15, 'Topics will vary semester to semester. See the Computer Science Division announcements.', 'TuTh 2:00-3:30P', '540AB', 'Cory', 'LEC', 4, 5),
(26492, 'CS 194', 'Introduction to Data Science', 16, 'Topics will vary semester to semester. See the Computer Science Division announcements.', 'MW 5:00-6:30P', '145', 'Moffitt', 'LEC', 3, 19),
(26493, 'CS 194', 'Image Manipulation and Computational Photography', 26, 'Topics will vary semester to semester. See the Computer Science Division announcements.', 'MF 4:00P-5:30P', '306', 'Soda', 'LEC', 4, 13),
(26496, 'CS 195', 'Social Implications of Computers', 1, 'Topics include electronic community; the changing nature of work; technological risks; the information economy; intellectual property; privacy; artificial intelligence and the sense of self; pornography and censorship; professional ethics. Students will lead discussions on additional topics.', 'W 4:00P-5:30P', '1', 'Le Conte', 'LEC', 1, 0),
(26505, 'CS H196A', 'Senior Honors Thesis', 1, 'Thesis work under the supervision of a faculty member. To obtain credit the student must, at the end of two semesters, submit a satisfactory thesis to the Electrical Engineering and Computer Science department archive. A total of four units must be taken. The units many be distributed between one or two semesters in any way. H196A-H196B count as graded technical elective units, but may not be used to satisfy the requirement for 27 upper division technical units in the College of Letters and Science with a m', 'None', 'Â ', 'None', 'IND', 1, 0),
(26508, 'CS H196B', 'Senior Honors Thesis', 1, 'Thesis work under the supervision of a faculty member. To obtain credit the student must, at the end of two semesters, submit a satisfactory thesis to the Electrical Engineering and Computer Science department archive. A total of four units must be taken. The units many be distributed between one or two semesters in any way. H196A-H196B count as graded technical elective units, but may not be used to satisfy the requirement for 27 upper division technical units in the College of Letters and Science with a m', 'None', 'Â ', 'None', 'IND', 1, 0),
(26535, 'CS 198', 'Macintosh Student Developers for OS X', 1, 'Group study of selected topics in Computer Sciences, usually relating to new developments.', 'MW 8:00P-10:00P', '200', 'Sutardja Dai', 'GRP', 2, 0),
(26538, 'CS 198', 'GamesCrafters', 2, 'Group study of selected topics in Computer Sciences, usually relating to new developments.', 'MWF 11:00A-12:00P', '606', 'Soda', 'GRP', 2, 0),
(26541, 'CS 198', 'UC Berkeley Undergraduate Graphics Group (UCBUGG)', 3, 'Group study of selected topics in Computer Sciences, usually relating to new developments.', 'TuTh 7:00P-9:00P', '200', 'Sutardja Dai', 'GRP', 3, 0),
(26694, 'CS C249A', 'Introduction to Embedded Systems', 1, 'This course introduces students to the basics of models, analysis tools, and control for embedded systems operating in real time. Students learn how to combine physical processes with computation. Topics include models of computation, control, analysis and verification, interfacing with the physical world, mapping to platforms, and distributed embedded systems. The course has a strong laboratory component, with emphasis on a semester-long sequence of projects. Also listed as Electrical Engineering C249A.', 'TuTh 11:00A-12:30P', '105', 'North Gate', 'LEC', 4, 9),
(26697, 'CS 250', 'VLSI Systems Design', 1, 'Unified top-down and bottom-up design of integrated circuits and systems concentrating on architectural and topological issues. VLSI architectures, systolic arrays, self-timed systems. Trends in VLSI development. Physical limits. Tradeoffs in custom-design, standard cells, gate arrays. VLSI design tools.', 'TuTh 9:30A-11:00A', '320', 'Soda', 'LEC', 4, 0),
(26700, 'CS 260A', 'User Interface Design and Development', 1, 'The design, implementation, and evaluation of user interfaces. User-centered design and task analysis. Conceptual models and interface metaphors. Usability inspection and evaluation methods. Analysis of user study data. Input methods (keyboard, pointing, touch, tangible) and input models. Visual design principles. Interface prototyping and implementation methodologies and tools. Students will develop a user interface for a specific task and target user group in teams.', 'TuTh 3:30P-5:00P', '306', 'Soda', 'LEC', 4, 0),
(26703, 'CS 262A', 'Advanced Topics in Computer Systems', 1, 'Graduate survey of systems for managing computation and information, covering a breadth of topics: early systems; volatile memory management, including virtual memory and buffer management; persistent memory systems, including both file systems and transactional storage managers; storage metadata, physical vs. logical naming, schemas, process scheduling, threading and concurrency control; system support for networking, including remote procedure calls, transactional RPC, TCP, and active messages; security i', 'MW 10:30A-12:00P', '306', 'Soda', 'LEC', 4, 0),
(26714, 'CS 276', 'Cryptography', 1, 'Graduate survey of modern topics on theory, foundations, and applications of modern cryptography. One-way functions; pseudorandomness; encryption; authentication; public-key cryptosystems; notions of security. May also cover zero-knowledge proofs, multi-party cryptographic protocols, practical applications, and/or other topics, as time permits.', 'MW 2:30-4:00P', '320', 'Soda', 'LEC', 3, 0),
(26718, 'CS C281A', 'Statistical Learning Theory', 1, 'Classification regression, clustering, dimensionality, reduction, and density estimation. Mixture models, hierarchical models, factorial models, hidden Markov, and state space models, Markov properties, and recursive algorithms for general probabilistic inference nonparametric methods including decision trees, kernal methods, neural networks, and wavelets. Ensemble methods. Also listed as Statistics C241A.', 'TT 12:30-2:00P', '277', 'Cory', 'LEC', 3, 0),
(26721, 'CS 284A', 'Foundations of Computer Graphics', 1, 'Techniques of modeling objects for the purpose of computer rendering: boundary representations, constructive solids geometry, hierarchical scene descriptions. Mathematical techniques for curve and surface representation. Basic elements of a computer graphics rendering pipeline; architecture of modern graphics display devices. Geometrical transformations such as rotation, scaling, translation, and their matrix representations. Homogeneous coordinates, projective and perspective transformations.', 'MW 2:30P-4:00P', '306', 'Soda', 'LEC', 4, 15),
(26727, 'CS 286B', 'Implementation of Data Base Systems', 1, 'Implementation of data base systems on modern hardware systems. Considerations concerning operating system design, including buffering, page size, prefetching, etc. Query processing algorithms, design of crash recovery and concurrency control systems. Implementation of distributed data bases and data base machines.', 'TuTh 2:00P-3:30P', '320', 'Soda', 'LEC', 3, 11),
(26730, 'CS 288', 'Artificial Intelligence Approach to Natural Language Processing', 1, 'Methods and models for the analysis of natural (human) language data.  Topics include: language modeling, speech recognition, linguistic analysis (syntactic parsing, semantic analysis, reference resolution, discourse modeling), machine translation, information extraction, question answering, and computational linguistics techniques.', 'TuTh 11:00A-12:30P', '310', 'Soda', 'LEC', 4, 0),
(26731, 'CS 294', 'Visualization', 10, 'Topics will vary from semester to semester. See Computer Science Division announcements.', 'MW 1:00P-2:30P', '310', 'Soda', 'LEC', 3, 0),
(26732, 'CS 294', 'Introduction to Data Science', 16, 'Topics will vary from semester to semester. See Computer Science Division announcements.', 'MW 5:00-6:30P', '145', 'Moffitt', 'LEC', 3, 0),
(26733, 'CS 294', 'Image Manipulation and Computational Photography', 26, 'Topics will vary from semester to semester. See Computer Science Division announcements.', 'MF 4:00P-5:30P', '306', 'Soda', 'LEC', 4, 0),
(26734, 'CS 294', 'Interactive  Device Design', 84, 'Topics will vary from semester to semester. See Computer Science Division announcements.', 'MW 10:30A-12:00P', '141', 'Sutardja Dai', 'LEC', 3, 0),
(26735, 'CS 294', 'Geometry and Complexity Theory', 99, 'Topics will vary from semester to semester. See Computer Science Division announcements.', 'TT 5:00-6:30P', '405', 'Soda', 'LEC', 3, 0),
(26738, 'CS 294', 'Learning in Sequential Decision Problems', 102, 'Topics will vary from semester to semester. See Computer Science Division announcements.', 'TT 2:00-3:30P', '334', 'Evans', 'LEC', 3, 0),
(26739, 'CS 298', 'Theory Seminar', 2, 'Advanced study in various subjects through seminars on topics to be selected each year, informal group studies of special problems, group participation in comprehensive design problems, or group research on complete problems for analysis and experimentation.', 'M 4:00P-6:00P', '438', 'Soda', 'GRP', 1, 0),
(26741, 'CS 294', 'Mathematical Foundations of Data Science', 103, 'Topics will vary from semester to semester. See Computer Science Division announcements.', 'Th 3:30-5:00P', '405', 'Soda', 'LEC', 2, 0),
(26742, 'CS 298', 'EECS Colloquium', 3, 'Advanced study in various subjects through seminars on topics to be selected each year, informal group studies of special problems, group participation in comprehensive design problems, or group research on complete problems for analysis and experimentation.', 'W 4:00P-5:00P', '306', 'Soda', 'GRP', 1, 0),
(26744, 'CS 294', 'Sensing, Perception, and Natural Human-Device Interaction Techno', 104, 'Topics will vary from semester to semester. See Computer Science Division announcements.', 'F 8:00A-10:00A', '606', 'Soda', 'LEC', 2, 0),
(26745, 'CS 298', 'Matrix Computations and Scientific Computing', 6, 'Advanced study in various subjects through seminars on topics to be selected each year, informal group studies of special problems, group participation in comprehensive design problems, or group research on complete problems for analysis and experimentation.', 'W 12:00P-1:00P', '380', 'Soda', 'GRP', 1, 0),
(26747, 'CS 294', 'Empirical Analysis', 105, 'Topics will vary from semester to semester. See Computer Science Division announcements.', 'TU 3:30-5:00P', '320', 'Soda', 'LEC', 1, 0),
(26955, 'CS 375', 'Teaching Techniques', 1, 'Discussion and practice of techniques for effective teaching, focusing on issues most relevant to teaching assistants in computer science courses.', 'M 5:00P-7:00P', '310', 'Soda', 'DIS', 0, 0),
(27051, 'CS 176', 'Algorithms for Computational Biology', 101, 'Algorithms and probabilistic models that arise in various computational biology applications: suffix trees, suffix arrays, pattern matching, repeat finding, sequence alignment, phylogenetics, genome rearrangements, hidden Markov models, gene finding, motif finding, stochastic context free grammars, RNA secondary structure. There are no biology prerequisites for this course, but a strong quantitative background will be essential.', 'W 1:00-2:00P', '3113', 'Etcheverry', 'DIS', 0, 0),
(27054, 'CS 176', 'Algorithms for Computational Biology', 102, 'Algorithms and probabilistic models that arise in various computational biology applications: suffix trees, suffix arrays, pattern matching, repeat finding, sequence alignment, phylogenetics, genome rearrangements, hidden Markov models, gene finding, motif finding, stochastic context free grammars, RNA secondary structure. There are no biology prerequisites for this course, but a strong quantitative background will be essential.', 'W 2:00-3:00P', '3105', 'Etcheverry', 'DIS', 0, 0),
(27093, 'CS 294', 'Special Topics in Software Engineering', 169, 'Topics will vary from semester to semester. See Computer Science Division announcements.', 'MW 5:30-7:00P', '306', 'Soda', 'LEC', 4, 0),
(27096, 'CS C191', 'Quantum Information Science and Technology', 101, 'This multidisciplinary course provides an introduction to fundamental conceptual aspects of quantum mechanics from a computational and informational theoretic perspective, as well as physical implementations and technological applications of quantum information science. Basic sections of quantum algorithms, complexity, and cryptography, will be touched upon, as well as pertinent physical realizations from nanoscale science and engineering. Also listed as Physics C191 and Chemistry C191.', 'F 11:00A-12:00P', '306', 'Soda', 'DIS', 0, 0),
(27099, 'CS 61B', 'Data Structures', 3, 'Fundamental dynamic data structures, including linear lists, queues, trees, and other linked structures; arrays strings, and hash tables. Storage management. Elementary principles of software engineering. Abstract data types. Algorithms for sorting and searching. Introduction to the Java programming language.', 'MWF 2:00-3:00P', '120', 'Latimer', 'LEC', 4, 15);

-- --------------------------------------------------------

--
-- Table structure for table `Professors`
--

CREATE TABLE IF NOT EXISTS `Professors` (
  `Professor_Name` varchar(64) NOT NULL,
  `CCN` int(11) DEFAULT NULL,
  `Rating` double(2,1) DEFAULT NULL,
  `Salary` mediumint(20) DEFAULT NULL,
  `Position` varchar(64) DEFAULT NULL,
  `Homepage` varchar(128) DEFAULT NULL,
  PRIMARY KEY (`Professor_Name`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `Professors`
--

INSERT INTO `Professors` (`Professor_Name`, `CCN`, `Rating`, `Salary`, `Position`, `Homepage`) VALUES
('Alexei (Alyosha) Efros', 26493, 6.2, 55250, 'ASSOC PROF-AY-B/E/E', '/Courses/Data/1060.html'),
('Anant Sahai', 26130, 5.7, 122974, 'ASSOC PROF-AY-B/E/E', '/Courses/Data/204.html'),
('Benjamin Recht', 26718, 6.2, 139823, 'ASST PROF-AY-B/E/E', '/Courses/Data/42.html'),
('BjÃ¶rn Hartmann', 26734, 6.2, 135254, 'ASST PROF-AY-B/E/E', '/Courses/Data/962.html'),
('Brian A. Barsky', 25740, 5.4, 170821, 'PROF-AY-B/E/E', '/Courses/Data/1086.html'),
('Brian K. Harvey', 25672, 5.8, 93079, 'SR LECT SOE-AY', '/Courses/Data/1103.html'),
('Dan Garcia', 26007, 6.2, 149862, 'SR LECT SOE-AY', '/Courses/Data/188.html'),
('Daniel Klein', 26730, 6.6, 143925, 'ASSOC PROF-AY-B/E/E', '/Courses/Data/48.html'),
('David E. Culler', 26316, 5.7, 207487, 'PROF-AY-B/E/E', '/Courses/Data/207.html'),
('David Wagner', 26364, 6.5, 166725, 'PROF-AY-B/E/E', '/Courses/Data/210.html'),
('Doug Tygar', 26295, 5.4, 173348, 'PROF-AY-B/E/E', '/Courses/Data/499.html'),
('Edward A. Lee', 26259, 6.1, 215759, 'PROF-AY-B/E/E', '/Courses/Data/508.html'),
('Eric Paulos', 26280, 6.0, 241264, 'ASST PROF-AY-B/E/E', '/Courses/Data/206.html'),
('George Necula', 26349, 5.6, 164510, 'PROF-AY-B/E/E', '/Courses/Data/209.html'),
('Gerald Friedland', 25674, 5.3, 5717, 'LECT-AY-1/9', '/Courses/Data/855.html'),
('James Demmel', 26745, 5.6, 246928, 'PROF-AY-B/E/E', '/Courses/Data/353.html'),
('James O''Brien', 26412, 5.5, 167982, 'PROF-AY-B/E/E', '/Courses/Data/214.html'),
('John D. Kubiatowicz', 26703, 6.1, 148330, 'PROF-AY-B/E/E', '/Courses/Data/190.html'),
('John DeNero', 25752, 6.6, 15391, 'LECT-AY-1/9', '/Courses/Data/185.html'),
('John F. Canny', 26492, 4.6, 152911, 'PROF-AY-B/E/E', '/Courses/Data/884.html'),
('John Russell', 25747, 5.6, 198549, 'PROF-AY-B/E/E', NULL),
('John Wawrzynek', 26262, 5.5, 168670, 'PROF-AY-B/E/E', '/Courses/Data/57.html'),
('Jonathan Bachrach', 26697, 5.5, 156148, 'ASST RES-FY-B/E/E', '/Courses/Data/86.html'),
('Joseph Landsberg', 26735, NULL, NULL, NULL, '/Courses/Data/1088.html'),
('Joseph M. Hellerstein', 26727, 5.9, 82630, 'PROF-AY-B/E/E', '/Courses/Data/176.html'),
('Joshua Hug', 25928, 6.1, NULL, NULL, '/Courses/Data/187.html'),
('K. Birgitta Whaley', 26486, 5.5, 191146, 'PROF-AY', '/Courses/Data/105.html'),
('Kurt Keutzer', 26490, 5.6, 199457, 'PROF-AY-B/E/E', '/Courses/Data/864.html'),
('LIU, T K', 26742, 6.1, 250090, 'PROF-AY-B/E/E', '/Courses/Data/335.html'),
('Maneesh Agrawala', 26731, 5.2, 209755, 'PROF-AY-B/E/E', '/Courses/Data/256.html'),
('Michel Maharbiz', 25778, 5.4, 136606, 'ASSOC PROF-AY-B/E/E', '/Courses/Data/1065.html'),
('Nir Yosef', 26411, NULL, NULL, NULL, '/Courses/Data/862.html'),
('Paul Hilfinger', 25917, 5.4, 116771, 'SR LECT SOE-AY', '/Courses/Data/195.html'),
('Paul N. Hilfinger', 25653, 5.4, 116771, 'SR LECT SOE-AY', '/Courses/Data/195.html'),
('Peter Bartlett', 26738, 5.1, 56700, 'PROF-AY-B/E/E', '/Courses/Data/1095.html'),
('Pieter Abbeel', 25747, 5.8, 140783, 'ASST PROF-AY-B/E/E', '/Courses/Data/1041.html'),
('Ras Bodik', 26337, 5.7, 159699, 'PROF-AY-B/E/E', '/Courses/Data/208.html'),
('Ravindran Kannan', 26741, NULL, NULL, NULL, '/Courses/Data/1101.html'),
('Sanjam Garg', 26714, NULL, NULL, NULL, '/Courses/Data/90.html'),
('Satish Rao', 26955, 4.9, 143969, 'PROF-AY-B/E/E', '/Courses/Data/1008.html'),
('Scott Shenker', 25661, 6.2, 106507, 'PROF-AY-B/E/E', '/Courses/Data/1098.html'),
('Stuart J. Russell', 26454, 5.6, 198549, 'PROF-AY-B/E/E', '/Courses/Data/215.html'),
('Sylvia Ratnasamy', 24701, 6.1, 148538, 'ASST PROF-AY-B/E/E', '/Courses/Data/1090.html'),
('Trevor Darrell', 25657, 6.3, NULL, NULL, '/Courses/Data/778.html'),
('Tsu-Jae King Liu', 26505, 6.1, 250090, 'PROF-AY-B/E/E', '/Courses/Data/663.html'),
('Umesh Vazirani', 26739, 5.6, 227381, 'PROF-AY-B/E/E', '/Courses/Data/334.html'),
('Vern Paxson', 26747, 6.6, 101813, 'PROF-AY-B/E/E', '/Courses/Data/1105.html');

-- --------------------------------------------------------

--
-- Table structure for table `Tutors`
--

CREATE TABLE IF NOT EXISTS `Tutors` (
  `Person_Name` varchar(64) NOT NULL,
  `Course_Codes` varchar(256) DEFAULT NULL,
  `Day` varchar(10) NOT NULL DEFAULT '',
  `Time` varchar(12) NOT NULL,
  `Building_Name` varchar(12) DEFAULT NULL,
  `Room_No` varchar(8) DEFAULT NULL,
  PRIMARY KEY (`Person_Name`,`Day`,`Time`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `Tutors`
--

INSERT INTO `Tutors` (`Person_Name`, `Course_Codes`, `Day`, `Time`, `Building_Name`, `Room_No`) VALUES
('Abhishek Gupta', 'PHYS7C,MATH54,CS61A,EE40,PHYS7B,EE20,EE130,EE141,EE105,CS61B,EE143,EE134,EE137A', 'Tuesday', '11AM-12PM', 'Cory', '290'),
('Alain Takabayashi', 'EE20,CS70,EE40,CS61A,MATH54,PHYS7A,PHYS7B,MATH53,CS61B,CS61C,EE105,EE130,EE140,EE143,EE147,EE141,EE137A', 'Friday', '12PM-1PM', 'Cory', '290'),
('Alain Takabayashi', 'EE20,CS70,EE40,CS61A,MATH54,PHYS7A,PHYS7B,MATH53,CS61B,CS61C,EE105,EE130,EE140,EE143,EE147,EE141,EE137A', 'Thursday', '2PM-3PM', 'Cory', '290'),
('Alan Yao', 'MATH113,CS61A,CS61C,EE20N,EE40,CS170,CS70,CS61B,CS161,CS188,CS184,CS194,EE126,CS162', 'Friday', '4PM-5PM', 'Soda', '345'),
('Alan Yao', 'MATH113,CS61A,CS61C,EE20N,EE40,CS170,CS70,CS61B,CS161,CS188,CS184,CS194,EE126,CS162', 'Thursday', '3PM-4PM', 'Soda', '345'),
('Alec Mouri', 'MATH53,MATH54,PHYS7A,PHYS7B,CS61A,CS61B,CS61C,CS70,CS164,EE20N,CS170,EE40,MATH110,CS161,CS184,CS188,CS176,EE105,CS162,CS195', 'Friday', '11AM-12PM', 'Soda', '345'),
('Alec Mouri', 'MATH53,MATH54,PHYS7A,PHYS7B,CS61A,CS61B,CS61C,CS70,CS164,EE20N,CS170,EE40,MATH110,CS161,CS184,CS188,CS176,EE105,CS162,CS195', 'Tuesday', '1PM-2PM', 'Cory', '290'),
('Allen Li', 'MATH54,PHYS7B,MATH53,EE20N,CS70,CS61A,CS61C,EE40,CS61B,CS170,CS188,MATH110,MATH113,EE120,EE126', 'Thursday', '11AM-12PM', 'Cory', '290'),
('Andrew Fang', 'CS70,EE20N,PHYS7A,PHYS7B,MATH1B,MATH54,CS61A,CS61B,CS61C,CS170,CS9E,EE40,MATH110,CS188,CS186,EE122,MATH113,CS194,CS164,CS162,EE20,CS160', 'Friday', '1PM-2PM', 'Soda', '345'),
('Andrew Fang', 'CS70,EE20N,PHYS7A,PHYS7B,MATH1B,MATH54,CS61A,CS61B,CS61C,CS170,CS9E,EE40,MATH110,CS188,CS186,EE122,MATH113,CS194,CS164,CS162,EE20,CS160', 'Thursday', '12PM-1PM', 'Soda', '345'),
('Anthony Sutardja', 'CS70,CS61B,CS61A,MATH54,CS9E,PHYS7A,PHYS7B,EE20N,CS61C,CS170,EE40,CS188,EE122,CS186,CS176,CS189,CS160', 'Monday', '12PM-1PM', 'Cory', '290'),
('Anthony Sutardja', 'CS70,CS61B,CS61A,MATH54,CS9E,PHYS7A,PHYS7B,EE20N,CS61C,CS170,EE40,CS188,EE122,CS186,CS176,CS189,CS160', 'Tuesday', '12PM-1PM', 'Soda', '345'),
('Austin Le', 'CS170,EE126,CS188,CS61B,CS61C,CS184,EE40,MATH53,CS161,CS61A,CS70,EE20,PHYS7B,MATH110,MATH54,MATH1B', 'Friday', '4PM-5PM', 'Cory', '290'),
('Austin Le', 'CS170,EE126,CS188,CS61B,CS61C,CS184,EE40,MATH53,CS161,CS61A,CS70,EE20,PHYS7B,MATH110,MATH54,MATH1B', 'Tuesday', '11AM-12PM', 'Soda', '345'),
('Barak Gila', 'CS170,CS61C,EE20,CS61A,PHYS7B,CS70,CS61B,MATH54', 'Monday', '1PM-2PM', 'Soda', '345'),
('Barak Gila', 'CS170,CS61C,EE20,CS61A,PHYS7B,CS70,CS61B,MATH54', 'Monday', '2PM-3PM', 'Soda', '345'),
('Brian Hou', 'CS61C,MATH53,PHYS7A,PHYS7B,CS61A,CS61B,CS70,CS188,EE20,EE40,CS162,CS170,MATH54,CS164,EE122', 'Tuesday', '4PM-5PM', 'Soda', '345'),
('Donny Reynolds', 'PHYS7A,MATH1A,MATH54,CS61A,CS61B,CS61C,MATH53,CS184,CS70,MATH1B,CS198,EE20N,PHYS7B,CS170,CS188', 'Monday', '12PM-1PM', 'Soda', '345'),
('Donny Reynolds', 'PHYS7A,MATH1A,MATH54,CS61A,CS61B,CS61C,MATH53,CS184,CS70,MATH1B,CS198,EE20N,PHYS7B,CS170,CS188', 'Wednesday', '12PM-1PM', 'Soda', '345'),
('Emily Lutz', 'CS61B,CS188,CS170,CS61C,EE40,PHYS7A,PHYS7B,MATH53,MATH54,CS61A,CS70', 'Thursday', '2PM-3PM', 'Soda', '345'),
('Emily Lutz', 'CS61B,CS188,CS170,CS61C,EE40,PHYS7A,PHYS7B,MATH53,MATH54,CS61A,CS70', 'Tuesday', '1PM-2PM', 'Soda', '345'),
('Ena Hariyoshi', 'CS170,EE126,CS188,CS61B,CS61C,CS184,EE40,MATH53,CS161,CS61A,CS70,EE20,PHYS7B,MATH110,MATH54,MATH1B', 'Tuesday', '2PM-3PM', 'Soda', '345'),
('Eric Atkinson', 'CS61B,CS61C,MATH1B,CS164,MATH54,CS294,CS61A,CS70,MATH53,MATH1A,EE20N,EE40,PHYS7C,CS170,MATH113,PHYS7A,PHYS7B,CS161,CS188,EE126', 'Monday', '11AM-12PM', 'Cory', '290'),
('Eric Atkinson', 'CS61B,CS61C,MATH1B,CS164,MATH54,CS294,CS61A,CS70,MATH53,MATH1A,EE20N,EE40,PHYS7C,CS170,MATH113,PHYS7A,PHYS7B,CS161,CS188,EE126', 'Thursday', '4PM-5PM', 'Soda', '345'),
('Evan Ye', 'EE20,CS61A,CS61B,CS61C,CS188,CS170,CS70', 'Thursday', '4PM-5PM', 'Cory', '290'),
('Jason Khoe', 'MATH1B,PHYS7A,PHYS7B,MATH53,CS9E,CS61A,CS61B,EE20N,MATH54,CS61C,EE40,CS188,CS70', 'Friday', '3PM-4PM', 'Soda', '345'),
('Jason Khoe', 'MATH1B,PHYS7A,PHYS7B,MATH53,CS9E,CS61A,CS61B,EE20N,MATH54,CS61C,EE40,CS188,CS70', 'Monday', '11AM-12PM', 'Soda', '345'),
('Jene Li', 'CS61B,CS61A,MATH1A,MATH1B,MATH54,MATH53,PHYS7A,EE20N,PHYS7B,EE40,CS70,CS61C,CS188,CS170,EE105,EE126,EE128,EE149,CS186,EE120,CS161', 'Friday', '2PM-3PM', 'Cory', '290'),
('Jene Li', 'CS61B,CS61A,MATH1A,MATH1B,MATH54,MATH53,PHYS7A,EE20N,PHYS7B,EE40,CS70,CS61C,CS188,CS170,EE105,EE126,EE128,EE149,CS186,EE120,CS161', 'Monday', '4PM-5PM', 'Cory', '290'),
('Jian Qiao', 'MATH53,EE20N,EE40,MATH54,CS61A,CS61B,CS61C,CS70,CS188,CS170,CS164,CS162,CS161,CS189', 'Monday', '1PM-2PM', 'Cory', '290'),
('Jian Qiao', 'MATH53,EE20N,EE40,MATH54,CS61A,CS61B,CS61C,CS70,CS188,CS170,CS164,CS162,CS161,CS189', 'Wednesday', '3PM-4PM', 'Cory', '290'),
('Jinsu Choi', 'CS61A,CS61B,PHYS7B,MATH54,CS70,EE20,CS61C,CS170,CS188,EE40', 'Thursday', '3PM-4PM', 'Cory', '290'),
('Jinsu Choi', 'CS61A,CS61B,PHYS7B,MATH54,CS70,EE20,CS61C,CS170,CS188,EE40', 'Tuesday', '4PM-5PM', 'Cory', '290'),
('Joseph Hui', 'CS61C,PHYS7A,PHYS7B,CS61A,CS61B,CS70,MATH110,CS170,MATH54,EE20,CS186,EE122,MATH53,MATH1A,MATH1B,CS9E,CS162,CS188,EE126', 'Friday', '11AM-12PM', 'Cory', '290'),
('Joseph Hui', 'CS61C,PHYS7A,PHYS7B,CS61A,CS61B,CS70,MATH110,CS170,MATH54,EE20,CS186,EE122,MATH53,MATH1A,MATH1B,CS9E,CS162,CS188,EE126', 'Thursday', '12PM-1PM', 'Cory', '290'),
('Joseph Moghadam', 'CS188,CS70,EE20N,CS61C,CS61B,CS61A,CS170,CS162,CS161,CS189,CS288,EE126', 'Monday', '4PM-5PM', 'Soda', '345'),
('Joseph Moghadam', 'CS188,CS70,EE20N,CS61C,CS61B,CS61A,CS170,CS162,CS161,CS189,CS288,EE126', 'Wednesday', '3PM-4PM', 'Soda', '345'),
('Leonino Colobong', 'MATH53,MATH54,PHYS7A,PHYS7B,CS61C,CS61A,CS184,EE40,EE20,CS70,CS170,CS188,CS61B', 'Friday', '3PM-4PM', 'Cory', '290'),
('Leonino Colobong', 'MATH53,MATH54,PHYS7A,PHYS7B,CS61C,CS61A,CS184,EE40,EE20,CS70,CS170,CS188,CS61B', 'Wednesday', '1PM-2PM', 'Cory', '290'),
('Lewin Gan', 'CS70,CS61B,CS170,CS270,CS61C,MATH54,MATH53,MATH110,MATH113,EE40,CS195,CS188,CS172,CS176,CS161,CS162,CS61AS,PHYS7A,PHYS7B,EE20N,CS191,CS288,EE126', 'Monday', '2PM-3PM', 'Cory', '290'),
('Lewin Gan', 'CS70,CS61B,CS170,CS270,CS61C,MATH54,MATH53,MATH110,MATH113,EE40,CS195,CS188,CS172,CS176,CS161,CS162,CS61AS,PHYS7A,PHYS7B,EE20N,CS191,CS288,EE126', 'Monday', '3PM-4PM', 'Cory', '290'),
('Mehrdad Niknami', 'CS70,PHYS7B,CS61A,EE20,CS61B,CS61C,EE120,CS170,EE40,CS191,MATH1A,MATH1B,CS195,CS188,CS164,EE117,CS194,CS189,CS150,EEC128,MATH54,CS61AS,EEC145B,CS176,EE105,EE20N,EE127,CS152,CS281A,EE244', 'Wednesday', '4PM-5PM', 'Cory', '290'),
('Michelle Chen', 'CS188,CS70,CS61A,CS61B,CS170,EE20,CS160,CS162,EE40,CS189,CS61C,MATH54,MATH53,PHYS7B', 'Tuesday', '12PM-1PM', 'Cory', '290'),
('Michelle Chen', 'CS188,CS70,CS61A,CS61B,CS170,EE20,CS160,CS162,EE40,CS189,CS61C,MATH54,MATH53,PHYS7B', 'Wednesday', '11AM-12PM', 'Cory', '290'),
('Mukund Chillakanti', 'CS70,PHYS7A,PHYS7B,CS61C,MATH53,MATH54,EE40,CS61A,CS61B,CS170,CS188', 'Friday', '2PM-3PM', 'Soda', '345'),
('Mukund Chillakanti', 'CS70,PHYS7A,PHYS7B,CS61C,MATH53,MATH54,EE40,CS61A,CS61B,CS170,CS188', 'Wednesday', '2PM-3PM', 'Cory', '290'),
('Raymond Shiau', 'EE40,EE20N,CS61A,CS61B,CS61C,CS170,CS184,CS188,CS195,CS70,EE122,CS189,CS161,CS152,CS164,CS194', 'Monday', '3PM-4PM', 'Soda', '345'),
('Raymond Shiau', 'EE40,EE20N,CS61A,CS61B,CS61C,CS170,CS184,CS188,CS195,CS70,EE122,CS189,CS161,CS152,CS164,CS194', 'Thursday', '1PM-2PM', 'Soda', '345'),
('Riyaz Faizullabhoy', 'PHYS7A,MATH54,MATH1A,CS61A,MATH53,MATH1B,PHYS7B,CS61C,CS61BL,CS70,CS188,CS170,EE20N,EE40,CS162,CS189,CS161,CS176,CS164,CS194', 'Tuesday', '2PM-3PM', 'Cory', '290'),
('Riyaz Faizullabhoy', 'PHYS7A,MATH54,MATH1A,CS61A,MATH53,MATH1B,PHYS7B,CS61C,CS61BL,CS70,CS188,CS170,EE20N,EE40,CS162,CS189,CS161,CS176,CS164,CS194', 'Tuesday', '3PM-4PM', 'Cory', '290'),
('Rudolph Laprade', 'PHYS7A,MATH54,MATH53,CS61A,EE20,PHYS7B,CS61B,CS70,CS61C,EE40,CS188,CS170', 'Thursday', '11AM-12PM', 'Soda', '345'),
('Rudolph Laprade', 'PHYS7A,MATH54,MATH53,CS61A,EE20,PHYS7B,CS61B,CS70,CS61C,EE40,CS188,CS170', 'Wednesday', '1PM-2PM', 'Soda', '345'),
('Varun Naik', 'CS195,EE40,PHYS7B,MATH53,CS61A,CS61B,CS61C,CS70,PHYS7A,CS9E,MATH54,EE20,CS186,CS162,EE122,CS188,CS170', 'Friday', '1PM-2PM', 'Cory', '290'),
('Vikram Sreekanti', 'CS70,MATH53,PHYS7B,EE20,CS186,CS61C,CS61A,CS61B,EE40,CS161,CS170,MATH54,CS162,CS286', 'Thursday', '1PM-2PM', 'Cory', '290'),
('Vikram Sreekanti', 'CS70,MATH53,PHYS7B,EE20,CS186,CS61C,CS61A,CS61B,EE40,CS161,CS170,MATH54,CS162,CS286', 'Wednesday', '2PM-3PM', 'Soda', '345'),
('XiaRui Zhang', 'CS61A,PHYS7A,CS70,PHYS7B,MATH54,CS61B,EE20,EE40,MATH53', 'Friday', '12PM-1PM', 'Soda', '345'),
('XiaRui Zhang', 'CS61A,PHYS7A,CS70,PHYS7B,MATH54,CS61B,EE20,EE40,MATH53', 'Wednesday', '12PM-1PM', 'Cory', '290'),
('Zeyu Liu', 'MATH53,CS61A,PHYS7B,CS61B,MATH54,CS70,CS170,CS61C,CS162,CS188,CS161,EE122,EE20', 'Tuesday', '3PM-4PM', 'Soda', '345'),
('Zeyu Liu', 'MATH53,CS61A,PHYS7B,CS61B,MATH54,CS70,CS170,CS61C,CS162,CS188,CS161,EE122,EE20', 'Wednesday', '11AM-12PM', 'Soda', '345');

--
-- Constraints for dumped tables
--

--
-- Constraints for table `Assistants`
--
ALTER TABLE `Assistants`
  ADD CONSTRAINT `Assistants_ibfk_1` FOREIGN KEY (`CCN`) REFERENCES `compsci`.`Courses` (`CCN`);

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
